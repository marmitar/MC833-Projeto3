"""
Perform Exploratory Data Analysis (EDA) on the preprocessed network data.
"""

import sys
from argparse import ArgumentParser
from pathlib import Path
from signal import SIGINT

# pyright: reportUnknownMemberType=false
import matplotlib.pyplot as plt
import polars as pl

from network_traffic_predictor.utils import cli_colors
from network_traffic_predictor.utils.plotting import set_theme
from network_traffic_predictor.utils.schemas import PACKET_SCHEMA

set_theme()


def _generate_descriptive_stats(df: pl.DataFrame) -> pl.DataFrame:
    """
    Generates a bytes_per_second time series and calculates its descriptive statistics.
    """
    print('Aggregating data to create bytes_per_second time series...')
    traffic_per_sec = (
        df.lazy()
        .select('Timestamp', 'Size (bytes)')
        .group_by_dynamic('Timestamp', every='1s')
        .agg(bytes_per_second=pl.col('Size (bytes)').sum())
    )

    print('--- Descriptive Statistics for Bytes per Second ---')
    return traffic_per_sec.select('bytes_per_second').describe()


def _create_protocol_histogram(df: pl.DataFrame, output_path: Path) -> None:
    """
    Creates and saves a histogram of packet sizes for TCP and UDP protocols.
    """
    print(f'Generating protocol distribution histogram to {output_path}...')

    partitions = df.partition_by('Type', as_dict=True)
    df_tcp = partitions[('TCP',)]['Size (bytes)']
    df_udp = partitions[('UDP',)]['Size (bytes)']

    plt.style.use('seaborn-v0_8-whitegrid')
    _ = plt.figure(figsize=(12, 7))

    _ = plt.hist(
        df_tcp,
        bins=100,
        alpha=0.7,
        label='TCP',
        color='royalblue',
        log=True,
    )
    _ = plt.hist(
        df_udp,
        bins=100,
        alpha=0.7,
        label='UDP',
        color='darkorange',
        log=True,
    )

    _ = plt.title('Distribution of Packet Sizes by Protocol', fontsize=16)
    _ = plt.xlabel('Packet Size (bytes)', fontsize=12)
    _ = plt.ylabel('Frequency (Log Scale)', fontsize=12)
    _ = plt.legend()
    plt.grid(True, which='both', linestyle='--', linewidth=0.5)
    plt.tight_layout()

    plt.savefig(output_path, dpi=300)
    print('Histogram saved successfully.')
    plt.close()


def main() -> int:
    """
    Generate and visualize descriptive statistics from a processed parquet file.
    """
    parser = ArgumentParser(
        'analysis',
        description='Generate and visualize descriptive statistics from a processed parquet file.',
    )
    _ = parser.add_argument('parquet_file', type=Path, help='Generated by the preprocess script.')
    _ = parser.add_argument('-q', '--quiet', action='store_true', help="Don't display progress.")
    _ = cli_colors.add_color_option(parser)

    args = parser.parse_intermixed_args()
    try:
        input_file: Path = args.parquet_file
        print(f'Analyzing {input_file.name}...')
        df = pl.read_parquet(input_file, schema=PACKET_SCHEMA)

        # 1. descriptive statistics
        stats_df = _generate_descriptive_stats(df)
        print(stats_df)

        # 2. visualizations
        output_plot_path = input_file.parent / f'{input_file.stem}_protocol_dist.png'
        _create_protocol_histogram(df, output_plot_path)

        return 0

    except KeyboardInterrupt:
        return SIGINT


if __name__ == '__main__':
    sys.exit(main())
