[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "network-traffic-predictor"
version = "0.1.0"
description = "Build a model that forecasts the `bytes_per_second` in a time series generated from a public datasets."
readme = "README.md"
requires-python = ">= 3.12"
license = "AGPL-3.0-or-later"
keywords = [
  "time-series",
  "forecasting",
  "network-traffic",
  "prediction",
  "machine-learning",
  "deep-learning",
  "ai",
  "networking",
  "network-monitoring",
  "traffic-analysis",
  "data-science",
]
authors = [{ name = "Tiago de Paula", email = "tiagodepalves@gmail.com" }]
classifiers = [
  "Development Status :: 1 - Planning",
  "Environment :: Console",
  "Environment :: GPU",
  "Framework :: Hatch",
  "Framework :: Jupyter",
  "Intended Audience :: Education",
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
  "Natural Language :: English",
  "Natural Language :: Portuguese (Brazilian)",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Internet :: Log Analysis",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: System :: Networking",
  "Topic :: System :: Networking :: Monitoring",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/marmitar/MC833-Projeto3#readme"
Issues = "https://github.com/marmitar/MC833-Projeto3/issues"
Source = "https://github.com/marmitar/MC833-Projeto3"

[tool.hatch.envs.lint]
dependencies = [
  "ruff >= 0.11.13",
]
[tool.hatch.envs.lint.scripts]
check = "ruff check src/ tests/"
format = "ruff format src/ tests/"

[tool.hatch.envs.types]
extra-dependencies = [
  "pyright >= 1.1.402",
]
[tool.hatch.envs.types.scripts]
check = "pyright src/"

[tool.ruff]
target-version = "py312"
line-length = 120
indent-width = 4

[tool.ruff.format]
indent-style = "space"
quote-style = "single"
line-ending = "lf"
docstring-code-format = true
preview = true

[tool.ruff.lint]
select = [
  "E", # pycodestyle (error)
  "F", # pyflakes
  "B", # bugbear
  "B9",
  "C4", # flake8-comprehensions
  "SIM", # flake8-simplify
  "I", # isort
  "UP", # pyupgrade
  "PIE", # flake8-pie
  "PGH", # pygrep-hooks
  "PYI", # flake8-pyi
  "RUF",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.pyright]
include = ["src"]
pythonVersion = "3.12"
pythonPlatform = "Linux"
# type checking
typeCheckingMode = "strict"
reportMissingImports = "error"
reportMissingTypeStubs = true
