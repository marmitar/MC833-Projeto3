"""
This type stub file was generated by pyright.
"""

from types import ModuleType
from typing_extensions import TypeIs
from ._typing import Array, Device

"""Static type stubs for `_compat.py`."""
class Namespace(ModuleType):
    def device(self, x: Array, /) -> Device:
        ...



def array_namespace(*xs: Array | complex | None, api_version: str | None = ..., use_compat: bool | None = ...) -> Namespace:
    ...

def device(x: Array, /) -> Device:
    ...

def is_array_api_obj(x: object, /) -> TypeIs[Array]:
    ...

def is_array_api_strict_namespace(xp: ModuleType, /) -> TypeIs[Namespace]:
    ...

def is_cupy_namespace(xp: ModuleType, /) -> TypeIs[Namespace]:
    ...

def is_dask_namespace(xp: ModuleType, /) -> TypeIs[Namespace]:
    ...

def is_jax_namespace(xp: ModuleType, /) -> TypeIs[Namespace]:
    ...

def is_numpy_namespace(xp: ModuleType, /) -> TypeIs[Namespace]:
    ...

def is_pydata_sparse_namespace(xp: ModuleType, /) -> TypeIs[Namespace]:
    ...

def is_torch_namespace(xp: ModuleType, /) -> TypeIs[Namespace]:
    ...

def is_cupy_array(x: object, /) -> TypeIs[Array]:
    ...

def is_dask_array(x: object, /) -> TypeIs[Array]:
    ...

def is_jax_array(x: object, /) -> TypeIs[Array]:
    ...

def is_numpy_array(x: object, /) -> TypeIs[Array]:
    ...

def is_pydata_sparse_array(x: object, /) -> TypeIs[Array]:
    ...

def is_torch_array(x: object, /) -> TypeIs[Array]:
    ...

def is_lazy_array(x: object, /) -> TypeIs[Array]:
    ...

def is_writeable_array(x: object, /) -> TypeIs[Array]:
    ...

def size(x: Array, /) -> int | None:
    ...
