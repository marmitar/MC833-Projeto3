"""
This type stub file was generated by pyright.
"""

from types import EllipsisType
from typing import Protocol, TypeAlias
from typing_extensions import override

"""Static typing helpers."""
class Array(Protocol):
    def __abs__(self) -> Array:
        ...

    def __pos__(self) -> Array:
        ...

    def __neg__(self) -> Array:
        ...

    def __invert__(self) -> Array:
        ...

    def __add__(self, other: Array | complex, /) -> Array:
        ...

    def __sub__(self, other: Array | complex, /) -> Array:
        ...

    def __mul__(self, other: Array | complex, /) -> Array:
        ...

    def __truediv__(self, other: Array | complex, /) -> Array:
        ...

    def __floordiv__(self, other: Array | complex, /) -> Array:
        ...

    def __mod__(self, other: Array | complex, /) -> Array:
        ...

    def __pow__(self, other: Array | complex, /) -> Array:
        ...

    def __matmul__(self, other: Array, /) -> Array:
        ...

    def __and__(self, other: Array | int, /) -> Array:
        ...

    def __or__(self, other: Array | int, /) -> Array:
        ...

    def __xor__(self, other: Array | int, /) -> Array:
        ...

    def __lshift__(self, other: Array | int, /) -> Array:
        ...

    def __rshift__(self, other: Array | int, /) -> Array:
        ...

    def __lt__(self, other: Array | complex, /) -> Array:
        ...

    def __le__(self, other: Array | complex, /) -> Array:
        ...

    def __gt__(self, other: Array | complex, /) -> Array:
        ...

    def __ge__(self, other: Array | complex, /) -> Array:
        ...

    @override
    def __eq__(self, other: Array | complex, /) -> Array:
        ...

    @override
    def __ne__(self, other: Array | complex, /) -> Array:
        ...

    def __radd__(self, other: Array | complex, /) -> Array:
        ...

    def __rsub__(self, other: Array | complex, /) -> Array:
        ...

    def __rmul__(self, other: Array | complex, /) -> Array:
        ...

    def __rtruediv__(self, other: Array | complex, /) -> Array:
        ...

    def __rfloordiv__(self, other: Array | complex, /) -> Array:
        ...

    def __rmod__(self, other: Array | complex, /) -> Array:
        ...

    def __rpow__(self, other: Array | complex, /) -> Array:
        ...

    def __rmatmul__(self, other: Array, /) -> Array:
        ...

    def __rand__(self, other: Array | int, /) -> Array:
        ...

    def __ror__(self, other: Array | int, /) -> Array:
        ...

    def __rxor__(self, other: Array | int, /) -> Array:
        ...

    def __rlshift__(self, other: Array | int, /) -> Array:
        ...

    def __rrshift__(self, other: Array | int, /) -> Array:
        ...

    @property
    def dtype(self) -> DType:
        ...

    @property
    def device(self) -> Device:
        ...

    @property
    def mT(self) -> Array:
        ...

    @property
    def ndim(self) -> int:
        ...

    @property
    def shape(self) -> tuple[int | None, ...]:
        ...

    @property
    def size(self) -> int | None:
        ...

    @property
    def T(self) -> Array:
        ...

    def __getitem__(self, key: GetIndex, /) -> Array:
        ...

    def __setitem__(self, key: SetIndex, value: Array | complex, /) -> None:
        ...

    def __bool__(self) -> bool:
        ...

    def __complex__(self) -> complex:
        ...

    def __float__(self) -> float:
        ...

    def __index__(self) -> int:
        ...

    def __int__(self) -> int:
        ...



class DType(Protocol):
    ...


class Device(Protocol):
    ...


SetIndex: TypeAlias = (int | slice | EllipsisType | Array | tuple[int | slice | EllipsisType | Array, ...])
GetIndex: TypeAlias = (SetIndex | None | tuple[int | slice | EllipsisType | None | Array, ...])
__all__ = ["Array", "DType", "Device", "GetIndex", "SetIndex"]
