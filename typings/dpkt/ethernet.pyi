"""
This type stub file was generated by pyright.
"""

from . import dpkt

"""
Ethernet II, LLC (802.3+802.2), LLC/SNAP, and Novell raw 802.3,
with automatic 802.1q, MPLS, PPPoE, and Cisco ISL decapsulation.
"""
ETH_CRC_LEN = ...
ETH_HDR_LEN = ...
ETH_LEN_MIN = ...
ETH_LEN_MAX = ...
ETH_MTU = ...
ETH_MIN = ...
ETH_TYPE_UNKNOWN = ...
ETH_TYPE_EDP = ...
ETH_TYPE_PUP = ...
ETH_TYPE_IP = ...
ETH_TYPE_ARP = ...
ETH_TYPE_AOE = ...
ETH_TYPE_CDP = ...
ETH_TYPE_DTP = ...
ETH_TYPE_REVARP = ...
ETH_TYPE_8021Q = ...
ETH_TYPE_8021AD = ...
ETH_TYPE_QINQ1 = ...
ETH_TYPE_QINQ2 = ...
ETH_TYPE_IPX = ...
ETH_TYPE_IP6 = ...
ETH_TYPE_PPP = ...
ETH_TYPE_MPLS = ...
ETH_TYPE_MPLS_MCAST = ...
ETH_TYPE_PPPoE_DISC = ...
ETH_TYPE_PPPoE = ...
ETH_TYPE_LLDP = ...
ETH_TYPE_TEB = ...
ETH_TYPE_PROFINET = ...
_ETH_TYPES_QINQ = ...
class Ethernet(dpkt.Packet):
    """Ethernet.

    Ethernet II, LLC (802.3+802.2), LLC/SNAP, and Novell raw 802.3,
    with automatic 802.1q, MPLS, PPPoE, and Cisco ISL decapsulation.

    Attributes:
        __hdr__: Header fields of Ethernet.
            dst: (bytes): Destination MAC address
            src: (bytes): Source MAC address
            type: (int): Ethernet frame type (Ethernet II, Novell raw IEEE 802.3, IEEE 802.2 LLC, IEEE 802.2 SNAP)
    """
    __hdr__ = ...
    _typesw = ...
    _typesw_rev = ...
    __pprint_funcs__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def unpack(self, buf): # -> None:
        ...
    
    def pack_hdr(self): # -> bytes:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    
    def __len__(self):
        ...
    
    @classmethod
    def set_type(cls, t, pktclass): # -> None:
        ...
    
    @classmethod
    def get_type(cls, t):
        ...
    
    @classmethod
    def get_type_rev(cls, k):
        ...
    


class MPLSlabel(dpkt.Packet):
    """A single entry in MPLS label stack"""
    __hdr__ = ...
    __bit_fields__ = ...
    def unpack(self, buf): # -> None:
        ...
    
    def as_tuple(self): # -> tuple[Any, Any, Any]:
        ...
    


class VLANtag8021Q(dpkt.Packet):
    """IEEE 802.1q VLAN tag"""
    __hdr__ = ...
    __bit_fields__ = ...
    def unpack(self, buf): # -> None:
        ...
    
    def as_tuple(self): # -> tuple[Any, Any, Any]:
        ...
    


class VLANtagISL(dpkt.Packet):
    """Cisco Inter-Switch Link VLAN tag"""
    __hdr__ = ...
    __bit_fields__ = ...
    def unpack(self, buf): # -> None:
        ...
    


def test_eth(): # -> None:
    ...

def test_eth_zero_ethtype(): # -> None:
    ...

def test_eth_init_with_data(): # -> None:
    ...

def test_mpls_label(): # -> None:
    ...

def test_802dot1q_tag(): # -> None:
    ...

def test_isl_tag(): # -> None:
    ...

def test_eth_802dot1q(): # -> None:
    ...

def test_eth_802dot1q_stacked(): # -> None:
    ...

def test_eth_vlan_arp(): # -> None:
    ...

def test_eth_mpls_stacked(): # -> None:
    ...

def test_eth_mpls_ipv6(): # -> None:
    ...

def test_isl_eth_llc_stp(): # -> None:
    ...

def test_eth_llc_snap_cdp(): # -> None:
    ...

def test_eth_llc_ipx(): # -> None:
    ...

def test_eth_pppoe(): # -> None:
    ...

def test_eth_2mpls_ecw_eth_llc_stp(): # -> None:
    ...

def test_eth_802dot1ad_802dot1q_ip(): # -> None:
    ...

def test_eth_pack(): # -> None:
    ...

def test_eth_802dot1q_with_unfamiliar_data(): # -> None:
    ...

def test_eth_802dot1q_with_arp_data(): # -> None:
    ...

def test_eth_8023_llc_trailer(): # -> None:
    ...

def test_eth_novell(): # -> None:
    ...

