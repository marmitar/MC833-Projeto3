"""
This type stub file was generated by pyright.
"""

from . import dns, dpkt

"""Network Basic Input/Output System."""
def encode_name(name): # -> LiteralString:
    """
    Return the NetBIOS first-level encoded name.

    14.1.  FIRST LEVEL ENCODING

    The first level representation consists of two parts:

     -  NetBIOS name
     -  NetBIOS scope identifier

    The 16 byte NetBIOS name is mapped into a 32 byte wide field using a
    reversible, half-ASCII, biased encoding.  Each half-octet of the
    NetBIOS name is encoded into one byte of the 32 byte field.  The
    first half octet is encoded into the first byte, the second half-
    octet into the second byte, etc.

    Each 4-bit, half-octet of the NetBIOS name is treated as an 8-bit,
    right-adjusted, zero-filled binary number.  This number is added to
    value of the ASCII character 'A' (hexadecimal 41).  The resulting 8-
    bit number is stored in the appropriate byte.  The following diagram
    demonstrates this procedure:


                         0 1 2 3 4 5 6 7
                        +-+-+-+-+-+-+-+-+
                        |a b c d|w x y z|          ORIGINAL BYTE
                        +-+-+-+-+-+-+-+-+
                            |       |
                   +--------+       +--------+
                   |                         |     SPLIT THE NIBBLES
                   v                         v
            0 1 2 3 4 5 6 7           0 1 2 3 4 5 6 7
           +-+-+-+-+-+-+-+-+         +-+-+-+-+-+-+-+-+
           |0 0 0 0 a b c d|         |0 0 0 0 w x y z|
           +-+-+-+-+-+-+-+-+         +-+-+-+-+-+-+-+-+
                   |                         |
                   +                         +     ADD 'A'
                   |                         |
            0 1 2 3 4 5 6 7           0 1 2 3 4 5 6 7
           +-+-+-+-+-+-+-+-+         +-+-+-+-+-+-+-+-+
           |0 1 0 0 0 0 0 1|         |0 1 0 0 0 0 0 1|
           +-+-+-+-+-+-+-+-+         +-+-+-+-+-+-+-+-+

    This encoding results in a NetBIOS name being represented as a
    sequence of 32 ASCII, upper-case characters from the set
    {A,B,C...N,O,P}.

    The NetBIOS scope identifier is a valid domain name (without a
    leading dot).

    An ASCII dot (2E hexadecimal) and the scope identifier are appended
    to the encoded form of the NetBIOS name, the result forming a valid
    domain name.
    """
    ...

def decode_name(nbname): # -> LiteralString:
    """
    Return the NetBIOS first-level decoded nbname.

    """
    ...

NS_A = ...
NS_NS = ...
NS_NULL = ...
NS_NB = ...
NS_NBSTAT = ...
NS_IN = ...
NS_NAME_G = ...
NS_NAME_DRG = ...
NS_NAME_CNF = ...
NS_NAME_ACT = ...
NS_NAME_PRM = ...
nbstat_svcs = ...
def node_to_service_name(name_service_flags): # -> str:
    ...

class NS(dns.DNS):
    """
    NetBIOS Name Service.

    RFC1002: https://tools.ietf.org/html/rfc1002
    """
    class Q(dns.DNS.Q):
        ...
    
    
    class RR(dns.DNS.RR):
        """NetBIOS resource record.

        RFC1001: 14.  REPRESENTATION OF NETBIOS NAMES

        NetBIOS names as seen across the client interface to NetBIOS are
        exactly 16 bytes long.  Within the NetBIOS-over-TCP protocols, a
        longer representation is used.

        There are two levels of encoding.  The first level maps a NetBIOS
        name into a domain system name.  The second level maps the domain
        system name into the "compressed" representation required for
        interaction with the domain name system.

        Except in one packet, the second level representation is the only
        NetBIOS name representation used in NetBIOS-over-TCP packet formats.
        The exception is the RDATA field of a NODE STATUS RESPONSE packet.
        """
        _node_name_struct = ...
        _node_name_len = ...
        def unpack_rdata(self, buf, off): # -> None:
            ...
        
    
    


class Session(dpkt.Packet):
    """NetBIOS Session Service."""
    __hdr__ = ...


SSN_MESSAGE = ...
SSN_REQUEST = ...
SSN_POSITIVE = ...
SSN_NEGATIVE = ...
SSN_RETARGET = ...
SSN_KEEPALIVE = ...
class Datagram(dpkt.Packet):
    """NetBIOS Datagram Service."""
    __hdr__ = ...


DGRAM_UNIQUE = ...
DGRAM_GROUP = ...
DGRAM_BROADCAST = ...
DGRAM_ERROR = ...
DGRAM_QUERY = ...
DGRAM_POSITIVE = ...
DGRAM_NEGATIVE = ...
def test_encode_name(): # -> None:
    ...

def test_decode_name(): # -> None:
    ...

def test_node_to_service_name(): # -> None:
    ...

def test_node_to_service_name_keyerror(): # -> None:
    ...

def test_rr(): # -> None:
    ...

def test_rr_nbstat(): # -> None:
    ...

def test_ns(): # -> None:
    ...

