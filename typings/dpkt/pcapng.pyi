

import sys
from . import dpkt

"""pcap Next Generation file format"""
BYTE_ORDER_MAGIC = ...
BYTE_ORDER_MAGIC_LE = ...
PCAPNG_VERSION_MAJOR = ...
PCAPNG_VERSION_MINOR = ...
PCAPNG_BT_IDB = ...
PCAPNG_BT_PB = ...
PCAPNG_BT_SPB = ...
PCAPNG_BT_EPB = ...
PCAPNG_BT_SHB = ...
PCAPNG_OPT_ENDOFOPT = ...
PCAPNG_OPT_COMMENT = ...
PCAPNG_OPT_SHB_HARDWARE = ...
PCAPNG_OPT_SHB_OS = ...
PCAPNG_OPT_SHB_USERAPPL = ...
PCAPNG_OPT_IF_NAME = ...
PCAPNG_OPT_IF_DESCRIPTION = ...
PCAPNG_OPT_IF_IPV4ADDR = ...
PCAPNG_OPT_IF_IPV6ADDR = ...
PCAPNG_OPT_IF_MACADDR = ...
PCAPNG_OPT_IF_EUIADDR = ...
PCAPNG_OPT_IF_SPEED = ...
PCAPNG_OPT_IF_TSRESOL = ...
PCAPNG_OPT_IF_TZONE = ...
PCAPNG_OPT_IF_FILTER = ...
PCAPNG_OPT_IF_OS = ...
PCAPNG_OPT_IF_FCSLEN = ...
PCAPNG_OPT_IF_TSOFFSET = ...
DLT_NULL = ...
DLT_EN10MB = ...
DLT_EN3MB = ...
DLT_AX25 = ...
DLT_PRONET = ...
DLT_CHAOS = ...
DLT_IEEE802 = ...
DLT_ARCNET = ...
DLT_SLIP = ...
DLT_PPP = ...
DLT_FDDI = ...
DLT_PFSYNC = ...
DLT_IEEE802_11 = ...
DLT_LINUX_SLL = ...
DLT_PFLOG = ...
DLT_IEEE802_11_RADIO = ...
if sys.platform.find('openbsd') != -1:
    DLT_LOOP = ...
    DLT_RAW = ...
else:
    DLT_LOOP = ...
    DLT_RAW = ...
dltoff = ...
class _PcapngBlock(dpkt.Packet):

    __hdr__ = ...
    def unpack_hdr(self, buf): # -> None:
        ...

    def unpack(self, buf): # -> None:
        ...

    def __bytes__(self): # -> bytes:
        ...

    def __len__(self):
        ...



class PcapngBlockLE(_PcapngBlock):
    __byte_order__ = ...


class PcapngOption(dpkt.Packet):

    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...

    def __bytes__(self): # -> bytes:
        ...

    def __len__(self):
        ...

    def __repr__(self): # -> str:
        ...



class PcapngOptionLE(PcapngOption):
    __byte_order__ = ...


class SectionHeaderBlock(_PcapngBlock):

    __hdr__ = ...
    def __bytes__(self): # -> bytes:
        ...



class SectionHeaderBlockLE(SectionHeaderBlock):
    __byte_order__ = ...


class InterfaceDescriptionBlock(_PcapngBlock):

    __hdr__ = ...
    def __bytes__(self): # -> bytes:
        ...



class InterfaceDescriptionBlockLE(InterfaceDescriptionBlock):
    __byte_order__ = ...


class EnhancedPacketBlock(_PcapngBlock):

    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...

    def __bytes__(self): # -> bytes:
        ...

    def __len__(self):
        ...



class EnhancedPacketBlockLE(EnhancedPacketBlock):
    __byte_order__ = ...


class PacketBlock(EnhancedPacketBlock):

    __hdr__ = ...
    def __bytes__(self): # -> bytes:
        ...



class PacketBlockLE(PacketBlock):
    __byte_order__ = ...


class Writer:

    __le = ...
    def __init__(self, fileobj, snaplen=..., linktype=..., shb=..., idb=...) -> None:

        ...

    def writepkt(self, pkt, ts=...): # -> None:

        ...

    def writepkt_time(self, pkt, ts): # -> None:

        ...

    def writepkts(self, pkts): # -> None:

        ...

    def close(self): # -> None:
        ...



class Reader:

    def __init__(self, fileobj) -> None:
        ...

    @property
    def fd(self):
        ...

    def fileno(self):
        ...

    def datalink(self):
        ...

    def setfilter(self, value, optimize=...):
        ...

    def readpkts(self): # -> list[tuple[Any, Any]]:
        ...

    def __next__(self): # -> tuple[Any, Any]:
        ...

    next = ...
    def dispatch(self, cnt, callback, *args): # -> int:

        ...

    def loop(self, callback, *args): # -> None:
        ...

    def __iter__(self): # -> Generator[tuple[Any, Any], Any, None]:
        ...



def test_shb(): # -> None:

    ...

def test_idb(): # -> None:

    ...

def test_epb(): # -> None:

    ...

def test_pb(): # -> None:

    ...

def test_pb_read(): # -> None:

    ...

def test_epb_ascii_comment_option(): # -> None:

    ...

def test_epb_invalid_utf8_comment_option(): # -> None:

    ...

def test_simple_write_read(): # -> None:

    ...

def test_pcapng_header(): # -> None:

    ...

def define_testdata(): # -> TestData:
    class TestData:
        ...



def pre_test(f): # -> Callable[..., Any]:
    ...

class WriterTestWrap:

    def __init__(self, *args, **kwargs) -> None:
        ...

    def __call__(self, f, *args, **kwargs): # -> Callable[..., None]:
        ...



class PostTest:
    def __init__(self, *args, **kwargs) -> None:
        ...

    def __call__(self, f, *args, **kwargs): # -> Callable[..., None]:
        ...



@PostTest(test='assertion', type=ValueError, msg='invalid pcapng header: not a SHB')
@pre_test
def test_shb_header(): # -> None:
    ...

@PostTest(test='assertion', type=ValueError, msg='unknown endianness')
@pre_test
def test_shb_bom(): # -> None:
    ...

@PostTest(test='assertion', type=ValueError, msg='unknown pcapng version 123.45')
@pre_test
def test_shb_version(): # -> None:
    ...

@PostTest(test='assertion', type=ValueError, msg='IDB not found')
@pre_test
def test_no_idb(): # -> None:
    ...

@PostTest(test='compare_property', property='idb')
@pre_test
def test_idb_opt_offset(): # -> InterfaceDescriptionBlockLE:

    ...

@PostTest(test='compare_property', property='dloff')
@pre_test
def test_idb_linktype(): # -> Literal[0]:

    ...

def test_repr(): # -> None:

    ...

@pre_test
def test_filter(): # -> None:
    ...

@PostTest(test='compare_method', method='readpkts')
@pre_test
def test_readpkts(): # -> list[tuple[float, bytes]]:
    ...

@PostTest(test='compare_method', method='next')
@pre_test
def test_next(): # -> tuple[float, bytes]:
    ...

@pre_test
def test_dispatch(): # -> None:
    ...

@pre_test
def test_loop(): # -> None:
    ...

def test_idb_opt_err(): # -> None:

    ...

def test_custom_read_write(): # -> None:

    ...

def test_multi_idb_writer(): # -> None:

    ...

@pre_test
def test_writer_validate_instance(): # -> None:

    ...

@pre_test
def test_writepkt_epb_ts(): # -> None:

    ...

@pre_test
def test_writer_validate_le(): # -> None:

    ...

@pre_test
def test_writer_validate_be(): # -> None:

    ...

@WriterTestWrap()
def test_writepkt_no_time(): # -> list[tuple[float, bytes]]:
    ...

@WriterTestWrap(writer={ 'snaplen': 10 })
def test_writepkt_snaplen(): # -> list[tuple[float, bytes]]:
    ...

@WriterTestWrap()
def test_writepkt_with_time(): # -> list[tuple[float, bytes]]:
    ...

@WriterTestWrap()
def test_writepkts(): # -> list[tuple[float, bytes]]:

    ...

def test_pcapng_block_pack(): # -> None:
    ...

def test_pcapng_block_unpack(): # -> None:
    ...

def test_epb_unpack(): # -> None:

    ...

def test_epb_unpack_length_mismatch(): # -> None:

    ...

def test_pcapng_block_len_no_opts(): # -> None:

    ...

def test_reader_file_descriptor(): # -> None:

    ...

def test_posttest(): # -> None:

    ...
