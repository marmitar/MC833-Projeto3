"""
This type stub file was generated by pyright.
"""

"""Simple packet creation and parsing.

The dpkt project is a python module for fast, simple packet parsing, with definitions for the basic TCP/IP protocols.
"""
class Error(Exception):
    ...


class UnpackError(Error):
    ...


class NeedData(UnpackError):
    ...


class PackError(Error):
    ...


class _MetaPacket(type):
    def __new__(cls, clsname, clsbases, clsdict): # -> Self:
        ...
    


class Packet(_MetaPacket("Temp", (object, ), {})):
    r"""Base packet class, with metaclass magic to generate members from self.__hdr__.

    Attributes:
        __hdr__: Packet header should be defined as a list of
                 (name, structfmt, default) tuples.
        __byte_order__: Byte order, can be set to override the default ('>')

    Example:
    >>> class Foo(Packet):
    ...   __hdr__ = (('foo', 'I', 1), ('bar', 'H', 2), ('baz', '4s', 'quux'))
    ...
    >>> foo = Foo(bar=3)
    >>> foo
    Foo(bar=3)
    >>> str(foo)
    '\x00\x00\x00\x01\x00\x03quux'
    >>> foo.bar
    3
    >>> foo.baz
    'quux'
    >>> foo.foo = 7
    >>> foo.baz = 'whee'
    >>> foo
    Foo(baz='whee', foo=7, bar=3)
    >>> Foo('hello, world!')
    Foo(baz=' wor', foo=1751477356L, bar=28460, data='ld!')
    """
    def __init__(self, *args, **kwargs) -> None:
        """Packet constructor with ([buf], [field=val,...]) prototype.

        Arguments:

        buf -- optional packet buffer to unpack

        Optional keyword arguments correspond to members to set
        (matching fields in self.__hdr__, or 'data').
        """
        ...
    
    def __len__(self):
        ...
    
    def __iter__(self): # -> Generator[tuple[Any, Any], None, None]:
        ...
    
    def __getitem__(self, kls): # -> Packet:
        """Return the 1st occurrence of the underlying <kls> data layer, raise KeyError otherwise."""
        ...
    
    def __contains__(self, kls): # -> bool:
        """Return True is the given <kls> data layer is present in the stack."""
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def pprint(self, indent=...): # -> None:
        """Human friendly pretty-print."""
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    
    def pack_hdr(self): # -> bytes:
        """Return packed header string."""
        ...
    
    def pack(self): # -> bytes:
        """Return packed header + self.data string."""
        ...
    
    def unpack(self, buf): # -> None:
        """Unpack packet header fields from buf, and set self.data."""
        ...
    


__vis_filter = ...
def hexdump(buf, length=...): # -> LiteralString:
    """Return a hexdump output string of the given buffer."""
    ...

def in_cksum_add(s, buf):
    ...

def in_cksum_done(s): # -> Any:
    ...

def in_cksum(buf): # -> Any:
    """Return computed Internet checksum."""
    ...

def test_utils(): # -> None:
    ...

def test_getitem_contains(): # -> None:
    class Foo(Packet):
        ...
    
    
    class Bar(Packet):
        ...
    
    
    class Baz(Packet):
        ...
    
    
    class Zeb(Packet):
        ...
    
    

def test_pack_hdr_overflow(): # -> None:
    """Try to fit too much data into struct packing"""
    class Foo(Packet):
        ...
    
    

def test_bit_fields_overflow(): # -> None:
    """Try to fit too much data into too few bits"""
    class Foo(Packet):
        ...
    
    

def test_pack_hdr_tuple(): # -> None:
    """Test the unpacking of a tuple for a single format string"""
    class Foo(Packet):
        ...
    
    

def test_unpacking_failure(): # -> None:
    class TestPacket(Packet):
        ...
    
    

def test_repr(): # -> None:
    """complex test for __repr__, __public_fields__"""
    class TestPacket(Packet):
        ...
    
    

