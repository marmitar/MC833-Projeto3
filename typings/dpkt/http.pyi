"""
This type stub file was generated by pyright.
"""

from . import dpkt

"""Hypertext Transfer Protocol."""
def parse_headers(f): # -> OrderedDict[Any, Any]:
    """Return dict of HTTP headers parsed from a file object."""
    ...

def parse_body(f, headers): # -> bytes:
    """Return HTTP body parsed from a file object, given HTTP header dict."""
    ...

class Message(dpkt.Packet):
    """Hypertext Transfer Protocol headers + body.

    HTTP messages are how data is exchanged between a server and a client. There are two types of messages: requests
    sent by the client to trigger an action on the server, and responses, the answer from the server. HTTP messages are
     composed of textual information encoded in ASCII, and span over multiple lines.

    Attributes:
        __hdr__: Header fields of HTTP.
            The start-line and HTTP headers of the HTTP message are collectively known as the head of the requests,
            whereas its payload is known as the body.
    """
    __metaclass__ = type
    __hdr_defaults__ = ...
    headers = ...
    body = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def unpack(self, buf, is_body_allowed=...): # -> None:
        ...
    
    def pack_hdr(self): # -> LiteralString:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    


class Request(Message):
    """Hypertext Transfer Protocol Request.

    HTTP requests are messages sent by the client to initiate an action on the server. Their start-line contain three
    elements. An HTTP method, a verb (like GET, PUT or POST) or a noun (like HEAD or OPTIONS), The request target,
    usually a URL, or the absolute path of the protocol, port, and domain are usually characterized by the request
    context and The HTTP version, which defines the structure of the remaining message, acting as an indicator of the
    expected version to use for the response.

    Attributes:
        __hdr__: Header fields of HTTP request.
            Many headers can appear in requests. They can be divided in several groups:
                General headers, like Via, apply to the message as a whole.
                Request headers, like User-Agent or Accept, modify the request by specifying it further (like Accept-
                    Language), by giving context (like Referer), or by conditionally restricting it (like If-None).
                Representation headers like Content-Type that describe the original format of the message data and
                    any encoding applied (only present if the message has a body).
    """
    __hdr_defaults__ = ...
    __methods = ...
    __proto = ...
    def unpack(self, buf): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    


class Response(Message):
    """Hypertext Transfer Protocol Response.

    The start line of an HTTP response, called the status line, contains the following information. The protocol
    version, usually HTTP/1.1, a status code, indicating success or failure of the request. Common status codes are 200,
     404, or 302, a status text. A brief, purely informational, textual description of the status code to help a human
     understand the HTTP message. A typical status line looks like: HTTP/1.1 404 Not Found.

    Attributes:
        __hdr__: Header fields of HTTP Response.
            Many headers can appear in responses. These can be divided into several groups:
                General headers, like Via, apply to the whole message.
                Response headers, like Vary and Accept-Ranges, give additional information about the server which
                    doesn't fit in the status line.
                Representation headers like Content-Type that describe the original format of the message data and any
                    encoding applied (only present if the message has a body).
    """
    __hdr_defaults__ = ...
    __proto = ...
    def unpack(self, buf): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    


def test_parse_request(): # -> None:
    ...

def test_format_request(): # -> None:
    ...

def test_chunked_response(): # -> None:
    ...

def test_multicookie_response(): # -> None:
    ...

def test_noreason_response(): # -> None:
    ...

def test_response_with_body(): # -> None:
    ...

def test_body_forbidden_response(): # -> None:
    ...

def test_request_version(): # -> None:
    ...

def test_valid_header(): # -> None:
    ...

def test_weird_end_header(): # -> None:
    ...

def test_gzip_response(): # -> None:
    ...

def test_message(): # -> None:
    ...

def test_invalid(): # -> None:
    ...

def test_response_str(): # -> None:
    ...

def test_request_str(): # -> None:
    ...

def test_parse_body(): # -> None:
    ...

