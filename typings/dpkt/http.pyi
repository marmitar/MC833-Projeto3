

from . import dpkt

"""Hypertext Transfer Protocol."""
def parse_headers(f): # -> OrderedDict[Any, Any]:

    ...

def parse_body(f, headers): # -> bytes:

    ...

class Message(dpkt.Packet):

    __metaclass__ = type
    __hdr_defaults__ = ...
    headers = ...
    body = ...
    def __init__(self, *args, **kwargs) -> None:
        ...

    def unpack(self, buf, is_body_allowed=...): # -> None:
        ...

    def pack_hdr(self): # -> LiteralString:
        ...

    def __len__(self): # -> int:
        ...

    def __str__(self) -> str:
        ...

    def __bytes__(self): # -> bytes:
        ...



class Request(Message):

    __hdr_defaults__ = ...
    __methods = ...
    __proto = ...
    def unpack(self, buf): # -> None:
        ...

    def __str__(self) -> str:
        ...

    def __bytes__(self): # -> bytes:
        ...



class Response(Message):

    __hdr_defaults__ = ...
    __proto = ...
    def unpack(self, buf): # -> None:
        ...

    def __str__(self) -> str:
        ...

    def __bytes__(self): # -> bytes:
        ...



def test_parse_request(): # -> None:
    ...

def test_format_request(): # -> None:
    ...

def test_chunked_response(): # -> None:
    ...

def test_multicookie_response(): # -> None:
    ...

def test_noreason_response(): # -> None:
    ...

def test_response_with_body(): # -> None:
    ...

def test_body_forbidden_response(): # -> None:
    ...

def test_request_version(): # -> None:
    ...

def test_valid_header(): # -> None:
    ...

def test_weird_end_header(): # -> None:
    ...

def test_gzip_response(): # -> None:
    ...

def test_message(): # -> None:
    ...

def test_invalid(): # -> None:
    ...

def test_response_str(): # -> None:
    ...

def test_request_str(): # -> None:
    ...

def test_parse_body(): # -> None:
    ...
