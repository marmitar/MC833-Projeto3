"""
This type stub file was generated by pyright.
"""

from . import dpkt

"""Radiotap"""
_TSFT_SHIFT = ...
_FLAGS_SHIFT = ...
_RATE_SHIFT = ...
_CHANNEL_SHIFT = ...
_FHSS_SHIFT = ...
_ANT_SIG_SHIFT = ...
_ANT_NOISE_SHIFT = ...
_LOCK_QUAL_SHIFT = ...
_TX_ATTN_SHIFT = ...
_DB_TX_ATTN_SHIFT = ...
_DBM_TX_POWER_SHIFT = ...
_ANTENNA_SHIFT = ...
_DB_ANT_SIG_SHIFT = ...
_DB_ANT_NOISE_SHIFT = ...
_RX_FLAGS_SHIFT = ...
_CHANNELPLUS_SHIFT = ...
_EXT_SHIFT = ...
_FLAGS_SIZE = ...
_CFP_FLAG_SHIFT = ...
_PREAMBLE_SHIFT = ...
_WEP_SHIFT = ...
_FRAG_SHIFT = ...
_FCS_SHIFT = ...
_DATA_PAD_SHIFT = ...
_BAD_FCS_SHIFT = ...
_SHORT_GI_SHIFT = ...
_CHAN_TYPE_SIZE = ...
_CHANNEL_TYPE_SHIFT = ...
_CCK_SHIFT = ...
_OFDM_SHIFT = ...
_TWO_GHZ_SHIFT = ...
_FIVE_GHZ_SHIFT = ...
_PASSIVE_SHIFT = ...
_DYN_CCK_OFDM_SHIFT = ...
_GFSK_SHIFT = ...
_GSM_SHIFT = ...
_STATIC_TURBO_SHIFT = ...
_HALF_RATE_SHIFT = ...
_QUARTER_RATE_SHIFT = ...
_FCS_MASK = ...
class Radiotap(dpkt.Packet):
    """Radiotap.

    Attributes:
        __hdr__: Header fields of Radiotap.
            version: (int): Version (1 byte)
            pad: (int): Padding (1 byte)
            length: (int): Length (2 bytes)
    """
    __hdr__ = ...
    __byte_order__ = ...
    @property
    def tsft_present(self): # -> Literal[1, 0]:
        ...
    
    @tsft_present.setter
    def tsft_present(self, val): # -> None:
        ...
    
    @property
    def flags_present(self): # -> Literal[1, 0]:
        ...
    
    @flags_present.setter
    def flags_present(self, val): # -> None:
        ...
    
    @property
    def rate_present(self): # -> Literal[1, 0]:
        ...
    
    @rate_present.setter
    def rate_present(self, val): # -> None:
        ...
    
    @property
    def channel_present(self): # -> Literal[1, 0]:
        ...
    
    @channel_present.setter
    def channel_present(self, val): # -> None:
        ...
    
    @property
    def fhss_present(self): # -> Literal[1, 0]:
        ...
    
    @fhss_present.setter
    def fhss_present(self, val): # -> None:
        ...
    
    @property
    def ant_sig_present(self): # -> Literal[1, 0]:
        ...
    
    @ant_sig_present.setter
    def ant_sig_present(self, val): # -> None:
        ...
    
    @property
    def ant_noise_present(self): # -> Literal[1, 0]:
        ...
    
    @ant_noise_present.setter
    def ant_noise_present(self, val): # -> None:
        ...
    
    @property
    def lock_qual_present(self): # -> Literal[1, 0]:
        ...
    
    @lock_qual_present.setter
    def lock_qual_present(self, val): # -> None:
        ...
    
    @property
    def tx_attn_present(self): # -> Literal[1, 0]:
        ...
    
    @tx_attn_present.setter
    def tx_attn_present(self, val): # -> None:
        ...
    
    @property
    def db_tx_attn_present(self): # -> Literal[1, 0]:
        ...
    
    @db_tx_attn_present.setter
    def db_tx_attn_present(self, val): # -> None:
        ...
    
    @property
    def dbm_tx_power_present(self): # -> Literal[1, 0]:
        ...
    
    @dbm_tx_power_present.setter
    def dbm_tx_power_present(self, val): # -> None:
        ...
    
    @property
    def ant_present(self): # -> Literal[1, 0]:
        ...
    
    @ant_present.setter
    def ant_present(self, val): # -> None:
        ...
    
    @property
    def db_ant_sig_present(self): # -> Literal[1, 0]:
        ...
    
    @db_ant_sig_present.setter
    def db_ant_sig_present(self, val): # -> None:
        ...
    
    @property
    def db_ant_noise_present(self): # -> Literal[1, 0]:
        ...
    
    @db_ant_noise_present.setter
    def db_ant_noise_present(self, val): # -> None:
        ...
    
    @property
    def rx_flags_present(self): # -> Literal[1, 0]:
        ...
    
    @rx_flags_present.setter
    def rx_flags_present(self, val): # -> None:
        ...
    
    @property
    def chanplus_present(self): # -> Literal[1, 0]:
        ...
    
    @chanplus_present.setter
    def chanplus_present(self, val): # -> None:
        ...
    
    def unpack(self, buf): # -> None:
        ...
    
    class RadiotapField(dpkt.Packet):
        __alignment__ = ...
        __byte_order__ = ...
    
    
    class Antenna(RadiotapField):
        __hdr__ = ...
    
    
    class AntennaNoise(RadiotapField):
        __hdr__ = ...
    
    
    class AntennaSignal(RadiotapField):
        __hdr__ = ...
    
    
    class Channel(RadiotapField):
        __alignment__ = ...
        __hdr__ = ...
    
    
    class FHSS(RadiotapField):
        __hdr__ = ...
    
    
    class Flags(RadiotapField):
        __hdr__ = ...
        @property
        def fcs(self):
            ...
        
        @fcs.setter
        def fcs(self, v): # -> None:
            ...
        
    
    
    class LockQuality(RadiotapField):
        __alignment__ = ...
        __hdr__ = ...
    
    
    class RxFlags(RadiotapField):
        __alignment__ = ...
        __hdr__ = ...
    
    
    class Rate(RadiotapField):
        __hdr__ = ...
    
    
    class TSFT(RadiotapField):
        __alignment__ = ...
        __hdr__ = ...
    
    
    class TxAttenuation(RadiotapField):
        __alignment__ = ...
        __hdr__ = ...
    
    
    class DbTxAttenuation(RadiotapField):
        __alignment__ = ...
        __hdr__ = ...
    
    
    class DbAntennaNoise(RadiotapField):
        __hdr__ = ...
    
    
    class DbAntennaSignal(RadiotapField):
        __hdr__ = ...
    
    
    class DbmTxPower(RadiotapField):
        __hdr__ = ...
    
    
    class ChannelPlus(RadiotapField):
        __alignment__ = ...
        __hdr__ = ...
    
    


def test_radiotap_1(): # -> None:
    ...

def test_radiotap_2(): # -> None:
    ...

def test_fcs(): # -> None:
    ...

def test_radiotap_3(): # -> None:
    ...

def test_radiotap_properties(): # -> None:
    ...

def test_radiotap_unpack_fcs(): # -> None:
    ...

def test_flags(): # -> None:
    ...

