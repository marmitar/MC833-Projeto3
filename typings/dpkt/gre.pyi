"""
This type stub file was generated by pyright.
"""

from . import dpkt

"""Generic Routing Encapsulation."""
GRE_CP = ...
GRE_RP = ...
GRE_KP = ...
GRE_SP = ...
GRE_SS = ...
GRE_AP = ...
GRE_opt_fields = ...
class GRE(dpkt.Packet):
    """Generic Routing Encapsulation.

    Generic Routing Encapsulation, or GRE, is a protocol for encapsulating data packets that use one routing protocol
    inside the packets of another protocol. "Encapsulating" means wrapping one data packet within another data packet,
    like putting a box inside another box. GRE is one way to set up a direct point-to-point connection across a network,
    for the purpose of simplifying connections between separate networks. It works with a variety of network layer
    protocols.

    Attributes:
        __hdr__: Header fields of GRE.
            flags: (int): Flag bits. (2 bytes)
            p: (int): Protocol Type (2 bytes)
    """
    __hdr__ = ...
    sre = ...
    @property
    def v(self):
        ...
    
    @v.setter
    def v(self, v): # -> None:
        ...
    
    @property
    def recur(self):
        """Recursion control bits. (3 bits)"""
        ...
    
    @recur.setter
    def recur(self, v): # -> None:
        ...
    
    class SRE(dpkt.Packet):
        __hdr__ = ...
        def unpack(self, buf): # -> None:
            ...
        
    
    
    def opt_fields_fmts(self): # -> tuple[list[str], list[str]]:
        ...
    
    def unpack(self, buf): # -> None:
        ...
    
    def __len__(self):
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    


def test_gre_v1(): # -> None:
    ...

def test_gre_len(): # -> None:
    ...

def test_gre_accessors(): # -> None:
    ...

def test_sre_creation(): # -> None:
    ...

def test_gre_nested_sre(): # -> None:
    ...

def test_gre_next_layer(): # -> None:
    ...

