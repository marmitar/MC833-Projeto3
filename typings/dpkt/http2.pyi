"""
This type stub file was generated by pyright.
"""

from . import dpkt

"""Hypertext Transfer Protocol Version 2."""
HTTP2_PREFACE = ...
HTTP2_FRAME_DATA = ...
HTTP2_FRAME_HEADERS = ...
HTTP2_FRAME_PRIORITY = ...
HTTP2_FRAME_RST_STREAM = ...
HTTP2_FRAME_SETTINGS = ...
HTTP2_FRAME_PUSH_PROMISE = ...
HTTP2_FRAME_PING = ...
HTTP2_FRAME_GOAWAY = ...
HTTP2_FRAME_WINDOW_UPDATE = ...
HTTP2_FRAME_CONTINUATION = ...
HTTP2_FLAG_END_STREAM = ...
HTTP2_FLAG_ACK = ...
HTTP2_FLAG_END_HEADERS = ...
HTTP2_FLAG_PADDED = ...
HTTP2_FLAG_PRIORITY = ...
HTTP2_SETTINGS_HEADER_TABLE_SIZE = ...
HTTP2_SETTINGS_ENABLE_PUSH = ...
HTTP2_SETTINGS_MAX_CONCURRENT_STREAMS = ...
HTTP2_SETTINGS_INITIAL_WINDOW_SIZE = ...
HTTP2_SETTINGS_MAX_FRAME_SIZE = ...
HTTP2_SETTINGS_MAX_HEADER_LIST_SIZE = ...
HTTP2_NO_ERROR = ...
HTTP2_PROTOCOL_ERROR = ...
HTTP2_INTERNAL_ERROR = ...
HTTP2_FLOW_CONTROL_ERROR = ...
HTTP2_SETTINGS_TIMEOUT = ...
HTTP2_STREAM_CLOSED = ...
HTTP2_FRAME_SIZE_ERROR = ...
HTTP2_REFUSED_STREAM = ...
HTTP2_CANCEL = ...
HTTP2_COMPRESSION_ERROR = ...
HTTP2_CONNECT_ERROR = ...
HTTP2_ENHANCE_YOUR_CALM = ...
HTTP2_INADEQUATE_SECURITY = ...
HTTP2_HTTP_1_1_REQUIRED = ...
error_code_str = ...
class HTTP2Exception(Exception):
    ...


class Preface(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...
    


class Frame(dpkt.Packet):
    """
    An HTTP/2 frame as defined in RFC 7540
    """
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...
    
    @property
    def length(self): # -> Any:
        ...
    


class Priority(dpkt.Packet):
    """
    Payload of a PRIORITY frame, also used in HEADERS frame with FLAG_PRIORITY.

    Also used in the HEADERS frame if the PRIORITY flag is set.
    """
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...
    


class Setting(dpkt.Packet):
    """
    A key-value pair used in the SETTINGS frame.
    """
    __hdr__ = ...


class PaddedFrame(Frame):
    """
    Abstract class for frame types that support the FLAG_PADDED flag: DATA,
    HEADERS and PUSH_PROMISE.
    """
    def unpack(self, buf): # -> None:
        ...
    


class DataFrame(PaddedFrame):
    """
    Frame of type DATA.
    """
    @property
    def payload(self): # -> bytes:
        ...
    


class HeadersFrame(PaddedFrame):
    """
    Frame of type HEADERS.
    """
    def unpack(self, buf): # -> None:
        ...
    


class PriorityFrame(Frame):
    """
    Frame of type PRIORITY.
    """
    def unpack(self, buf): # -> None:
        ...
    


class RSTStreamFrame(Frame):
    """
    Frame of type RST_STREAM.
    """
    def unpack(self, buf): # -> None:
        ...
    


class SettingsFrame(Frame):
    """
    Frame of type SETTINGS.
    """
    def unpack(self, buf): # -> None:
        ...
    


class PushPromiseFrame(PaddedFrame):
    """
    Frame of type PUSH_PROMISE.
    """
    def unpack(self, buf): # -> None:
        ...
    


class PingFrame(Frame):
    """
    Frame of type PING.
    """
    def unpack(self, buf): # -> None:
        ...
    


class GoAwayFrame(Frame):
    """
    Frame of type GO_AWAY.
    """
    def unpack(self, buf): # -> None:
        ...
    


class WindowUpdateFrame(Frame):
    """
    Frame of type WINDOW_UPDATE.
    """
    def unpack(self, buf): # -> None:
        ...
    


class ContinuationFrame(Frame):
    """
    Frame of type CONTINUATION.
    """
    def unpack(self, buf): # -> None:
        ...
    


FRAME_TYPES = ...
class FrameFactory:
    def __new__(cls, buf): # -> ContinuationFrame | DataFrame | GoAwayFrame | HeadersFrame | PingFrame | PriorityFrame | PushPromiseFrame | RSTStreamFrame | SettingsFrame | WindowUpdateFrame:
        ...
    


def frame_multi_factory(buf, preface=...): # -> tuple[list[Any], Literal[0]] | tuple[list[Any], int]:
    """
    Attempt to parse one or more Frame's out of buf

    Args:
      buf: string containing HTTP/2 frames. May have an incomplete frame at the
        end.
      preface: expect an HTTP/2 preface at the beginning of the buffer.

    Returns:
      [Frame]
      int, total bytes consumed, != len(buf) if an incomplete frame was left at
        the end.
    """
    ...

class TestFrame:
    """Some data found in real traffic"""
    @classmethod
    def setup_class(cls): # -> None:
        ...
    
    def test_frame(self): # -> None:
        ...
    
    def test_data(self): # -> None:
        ...
    
    def test_headers(self): # -> None:
        ...
    
    def test_priority(self): # -> None:
        ...
    
    def test_rst_stream(self): # -> None:
        ...
    
    def test_settings(self): # -> None:
        ...
    
    def test_push_promise(self): # -> None:
        ...
    
    def test_ping(self): # -> None:
        ...
    
    def test_goaway(self): # -> None:
        ...
    
    def test_window_update(self): # -> None:
        ...
    
    def test_continuation(self): # -> None:
        ...
    
    def test_factory(self): # -> None:
        ...
    
    def test_preface(self): # -> None:
        ...
    
    def test_multi(self): # -> None:
        ...
    


