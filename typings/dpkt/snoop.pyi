"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from . import dpkt

"""Snoop file format."""
SNOOP_MAGIC = ...
SNOOP_VERSION = ...
SDL_8023 = ...
SDL_8024 = ...
SDL_8025 = ...
SDL_8026 = ...
SDL_ETHER = ...
SDL_HDLC = ...
SDL_CHSYNC = ...
SDL_IBMCC = ...
SDL_FDDI = ...
SDL_OTHER = ...
dltoff = ...
class PktHdr(dpkt.Packet):
    """snoop packet header.

    TODO: Longer class information....

    Attributes:
        __hdr__: Header fields of snoop packet header.
        TODO.
    """
    __byte_order__ = ...
    __hdr__ = ...


class FileHdr(dpkt.Packet):
    """snoop file header.

    TODO: Longer class information....

    Attributes:
        __hdr__: Header fields of snoop file header.
        TODO.
    """
    __byte_order__ = ...
    __hdr__ = ...


class FileWriter:
    def __init__(self, fileobj) -> None:
        ...
    
    def close(self): # -> None:
        ...
    
    def writepkt(self, pkt, ts=...): # -> None:
        """Write single packet and optional timestamp to file.

        Args:
            pkt: `bytes` will be called on this and written to file.
            ts (float): Timestamp in seconds. Defaults to current time.
       """
        ...
    
    @abstractmethod
    def writepkt_time(self, pkt, ts): # -> None:
        """Write single packet and its timestamp to file.

        Args:
            pkt (bytes): Some `bytes` to write to the file
            ts (float): Timestamp in seconds
        """
        ...
    


class Writer(FileWriter):
    """Simple snoop dumpfile writer.

    TODO: Longer class information....

    Attributes:
        TODO.
    """
    precision_multiplier = ...
    def __init__(self, fileobj, linktype=...) -> None:
        ...
    
    def writepkt_time(self, pkt, ts): # -> None:
        """Write single packet and its timestamp to file.

        Args:
            pkt (bytes): Some `bytes` to write to the file
            ts (float): Timestamp in seconds
       """
        ...
    
    def writepkts(self, pkts): # -> None:
        """Write an iterable of packets to file.

        Timestamps should be in seconds.
        Packets must be of type `bytes` as they will not be cast.

        Args:
            pkts: iterable containing (ts, pkt)
        """
        ...
    


class FileReader:
    def __init__(self, fileobj) -> None:
        ...
    
    @property
    def fd(self):
        ...
    
    def fileno(self):
        ...
    
    def setfilter(self, value, optimize=...):
        ...
    
    def readpkts(self): # -> list[Any]:
        ...
    
    def dispatch(self, cnt, callback, *args): # -> int:
        """Collect and process packets with a user callback.

        Return the number of packets processed, or 0 for a savefile.

        Arguments:

        cnt      -- number of packets to process;
                    or 0 to process all packets until EOF
        callback -- function with (timestamp, pkt, *args) prototype
        *args    -- optional arguments passed to callback on execution
       """
        ...
    
    def loop(self, callback, *args): # -> int:
        """
        Convenience method which will apply the callback to all packets.

        Returns the number of packets processed.

        Arguments:

        callback -- function with (timestamp, pkt, *args) prototype
        *args    -- optional arguments passed to callback on execution
        """
        ...
    
    def __iter__(self): # -> Self:
        ...
    


class Reader(FileReader):
    """Simple pypcap-compatible snoop file reader.

    TODO: Longer class information....

    Attributes:
        TODO.
    """
    def __init__(self, fileobj) -> None:
        ...
    
    def datalink(self):
        ...
    
    def __next__(self): # -> tuple[Any, Any]:
        ...
    
    next = ...


def test_snoop_pkt_header(): # -> None:
    ...

def test_snoop_file_header(): # -> None:
    ...

class TestSnoopWriter:
    @classmethod
    def setup_class(cls): # -> None:
        ...
    
    def test_snoop_file_writer_filehdr(self): # -> None:
        ...
    
    def test_writepkt(self): # -> None:
        ...
    
    def test_writepkt_time(self): # -> None:
        ...
    
    def test_writepkts(self): # -> None:
        ...
    
    def test_snoop_writer_close(self): # -> None:
        ...
    


class TestSnoopReader:
    @classmethod
    def setup_class(cls): # -> None:
        ...
    
    def setup_method(self): # -> None:
        ...
    
    def test_open(self): # -> None:
        ...
    
    def test_invalid_magic(self): # -> None:
        ...
    
    def test_read_pkt(self): # -> None:
        ...
    
    def test_readpkts(self): # -> None:
        ...
    


class TestFileWriter:
    def setup_method(self): # -> None:
        ...
    
    def test_write(self): # -> None:
        ...
    
    def test_close(self): # -> None:
        ...
    


class TestFileReader:
    """
    Testing for the FileReader superclass which Reader inherits from.
    """
    pkts = ...
    class SampleReader(FileReader):
        """
        Very simple class which returns index as timestamp, and
        unparsed buffer as packet
        """
        def __init__(self, fobj) -> None:
            ...
        
        def __next__(self): # -> tuple[int, bytes]:
            ...
        
        next = ...
    
    
    def setup_method(self): # -> None:
        ...
    
    def test_attributes(self): # -> None:
        ...
    
    def test_readpkts_list(self): # -> None:
        ...
    
    def test_readpkts_iter(self): # -> None:
        ...
    
    def test_dispatch_all(self): # -> None:
        ...
    
    def test_dispatch_some(self): # -> None:
        ...
    
    def test_dispatch_termination(self): # -> None:
        ...
    
    def test_loop(self): # -> None:
        class Count:
            ...
        
        
    
    def test_next(self): # -> None:
        ...
    


