

from abc import abstractmethod
from . import dpkt

"""Snoop file format."""
SNOOP_MAGIC = ...
SNOOP_VERSION = ...
SDL_8023 = ...
SDL_8024 = ...
SDL_8025 = ...
SDL_8026 = ...
SDL_ETHER = ...
SDL_HDLC = ...
SDL_CHSYNC = ...
SDL_IBMCC = ...
SDL_FDDI = ...
SDL_OTHER = ...
dltoff = ...
class PktHdr(dpkt.Packet):

    __byte_order__ = ...
    __hdr__ = ...


class FileHdr(dpkt.Packet):

    __byte_order__ = ...
    __hdr__ = ...


class FileWriter:
    def __init__(self, fileobj) -> None:
        ...

    def close(self): # -> None:
        ...

    def writepkt(self, pkt, ts=...): # -> None:

        ...

    @abstractmethod
    def writepkt_time(self, pkt, ts): # -> None:

        ...



class Writer(FileWriter):

    precision_multiplier = ...
    def __init__(self, fileobj, linktype=...) -> None:
        ...

    def writepkt_time(self, pkt, ts): # -> None:

        ...

    def writepkts(self, pkts): # -> None:

        ...



class FileReader:
    def __init__(self, fileobj) -> None:
        ...

    @property
    def fd(self):
        ...

    def fileno(self):
        ...

    def setfilter(self, value, optimize=...):
        ...

    def readpkts(self): # -> list[Any]:
        ...

    def dispatch(self, cnt, callback, *args): # -> int:

        ...

    def loop(self, callback, *args): # -> int:

        ...

    def __iter__(self): # -> Self:
        ...



class Reader(FileReader):

    def __init__(self, fileobj) -> None:
        ...

    def datalink(self):
        ...

    def __next__(self): # -> tuple[Any, Any]:
        ...

    next = ...


def test_snoop_pkt_header(): # -> None:
    ...

def test_snoop_file_header(): # -> None:
    ...

class TestSnoopWriter:
    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_snoop_file_writer_filehdr(self): # -> None:
        ...

    def test_writepkt(self): # -> None:
        ...

    def test_writepkt_time(self): # -> None:
        ...

    def test_writepkts(self): # -> None:
        ...

    def test_snoop_writer_close(self): # -> None:
        ...



class TestSnoopReader:
    @classmethod
    def setup_class(cls): # -> None:
        ...

    def setup_method(self): # -> None:
        ...

    def test_open(self): # -> None:
        ...

    def test_invalid_magic(self): # -> None:
        ...

    def test_read_pkt(self): # -> None:
        ...

    def test_readpkts(self): # -> None:
        ...



class TestFileWriter:
    def setup_method(self): # -> None:
        ...

    def test_write(self): # -> None:
        ...

    def test_close(self): # -> None:
        ...



class TestFileReader:

    pkts = ...
    class SampleReader(FileReader):

        def __init__(self, fobj) -> None:
            ...

        def __next__(self): # -> tuple[int, bytes]:
            ...

        next = ...


    def setup_method(self): # -> None:
        ...

    def test_attributes(self): # -> None:
        ...

    def test_readpkts_list(self): # -> None:
        ...

    def test_readpkts_iter(self): # -> None:
        ...

    def test_dispatch_all(self): # -> None:
        ...

    def test_dispatch_some(self): # -> None:
        ...

    def test_dispatch_termination(self): # -> None:
        ...

    def test_loop(self): # -> None:
        class Count:
            ...



    def test_next(self): # -> None:
        ...
