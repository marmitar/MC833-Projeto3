

from . import dpkt

"""Domain Name System."""
DNS_Q = ...
DNS_R = ...
DNS_QUERY = ...
DNS_IQUERY = ...
DNS_STATUS = ...
DNS_NOTIFY = ...
DNS_UPDATE = ...
DNS_CD = ...
DNS_AD = ...
DNS_Z = ...
DNS_RA = ...
DNS_RD = ...
DNS_TC = ...
DNS_AA = ...
DNS_QR = ...
DNS_RCODE_NOERR = ...
DNS_RCODE_FORMERR = ...
DNS_RCODE_SERVFAIL = ...
DNS_RCODE_NXDOMAIN = ...
DNS_RCODE_NOTIMP = ...
DNS_RCODE_REFUSED = ...
DNS_RCODE_YXDOMAIN = ...
DNS_RCODE_YXRRSET = ...
DNS_RCODE_NXRRSET = ...
DNS_RCODE_NOTAUTH = ...
DNS_RCODE_NOTZONE = ...
DNS_A = ...
DNS_NS = ...
DNS_CNAME = ...
DNS_SOA = ...
DNS_NULL = ...
DNS_PTR = ...
DNS_HINFO = ...
DNS_MX = ...
DNS_TXT = ...
DNS_AAAA = ...
DNS_SRV = ...
DNS_OPT = ...
DNS_IN = ...
DNS_CHAOS = ...
DNS_HESIOD = ...
DNS_ANY = ...
def pack_name(name, off, label_ptrs): # -> bytes:
    ...

def unpack_name(buf, off): # -> tuple[str, Any]:
    ...

class DNS(dpkt.Packet):

    __hdr__ = ...
    @property
    def qr(self): # -> int:

        ...

    @qr.setter
    def qr(self, v): # -> None:
        ...

    @property
    def opcode(self):

        ...

    @opcode.setter
    def opcode(self, v): # -> None:
        ...

    @property
    def aa(self): # -> int:

        ...

    @aa.setter
    def aa(self, v): # -> None:
        ...

    @property
    def tc(self): # -> int:

        ...

    @tc.setter
    def tc(self, v): # -> None:
        ...

    @property
    def rd(self): # -> int:

        ...

    @rd.setter
    def rd(self, v): # -> None:
        ...

    @property
    def ra(self): # -> int:

        ...

    @ra.setter
    def ra(self, v): # -> None:
        ...

    @property
    def zero(self): # -> int:

        ...

    @zero.setter
    def zero(self, v): # -> None:
        ...

    @property
    def rcode(self):

        ...

    @rcode.setter
    def rcode(self, v): # -> None:
        ...

    class Q(dpkt.Packet):

        __hdr__ = ...
        def __len__(self):
            ...

        __str__ = ...
        def unpack(self, buf):
            ...



    class RR(Q):

        __hdr__ = ...
        def pack_rdata(self, off, label_ptrs): # -> bytes:
            ...

        def unpack_rdata(self, buf, off): # -> None:
            ...



    def pack_q(self, buf, q):

        ...

    def unpack_q(self, buf, off): # -> tuple[Q, Any]:

        ...

    def pack_rr(self, buf, rr):

        ...

    def unpack_rr(self, buf, off): # -> tuple[RR, Any]:

        ...

    def unpack(self, buf): # -> None:
        ...

    def __len__(self): # -> int:
        ...

    def __bytes__(self): # -> bytes | Any:
        ...



def define_testdata(): # -> TestData:

    class TestData:
        ...



def test_basic(): # -> None:
    ...

class TryExceptException:
    def __init__(self, exception_type, msg=...) -> None:
        ...

    def __call__(self, f, *args, **kwargs): # -> Callable[..., None]:
        ...



@TryExceptException(Exception, msg='There should have been an Exception raised')
def test_TryExceptException(): # -> None:

    ...

@TryExceptException(NotImplementedError)
def test_Q_len(): # -> None:

    ...

@TryExceptException(NotImplementedError)
def test_Q_unpack(): # -> None:

    ...

def property_runner(prop, ops, set_to=...): # -> None:
    ...

def test_qr(): # -> None:
    ...

def test_opcode(): # -> None:
    ...

def test_aa(): # -> None:
    ...

def test_tc(): # -> None:
    ...

def test_rd(): # -> None:
    ...

def test_ra(): # -> None:
    ...

def test_zero(): # -> None:
    ...

def test_rcode(): # -> None:
    ...

def test_PTR(): # -> None:
    ...

def test_OPT(): # -> None:
    ...

def test_pack_name(): # -> None:
    ...

@TryExceptException(dpkt.UnpackError)
def test_unpack_name(): # -> None:

    ...

@TryExceptException(dpkt.UnpackError)
def test_random_data(): # -> None:
    ...

@TryExceptException(dpkt.UnpackError)
def test_circular_pointers(): # -> None:
    ...

@TryExceptException(dpkt.UnpackError)
def test_very_long_name(): # -> None:
    ...

def test_null_response(): # -> None:
    ...

def test_txt_response(): # -> None:
    ...

def test_rdata_TXT(): # -> None:
    ...

def test_rdata_HINFO(): # -> None:
    ...

def test_rdata_rdata(): # -> None:
    ...

def test_rdata_A(): # -> None:
    ...

def test_rdata_NS(): # -> None:
    ...

def test_rdata_CNAME(): # -> None:
    ...

def test_rdata_PTR(): # -> None:
    ...

def test_rdata_SOA(): # -> None:
    ...

def test_rdata_MX(): # -> None:
    ...

def test_rdata_AAAA(): # -> None:
    ...

def test_rdata_SRV(): # -> None:
    ...

def test_rdata_OPT(): # -> None:
    ...

def test_dns_len(): # -> None:
    ...

@TryExceptException(dpkt.PackError)
def test_rdata_FAIL(): # -> None:
    ...

def test_soa(): # -> None:
    ...

def test_mx(): # -> None:
    ...

def test_aaaa(): # -> None:
    ...

def test_srv(): # -> None:
    ...

def test_cname(): # -> None:
    ...

@TryExceptException(dpkt.UnpackError)
def test_invalid_rr(): # -> None:
    ...
