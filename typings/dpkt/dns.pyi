"""
This type stub file was generated by pyright.
"""

from . import dpkt

"""Domain Name System."""
DNS_Q = ...
DNS_R = ...
DNS_QUERY = ...
DNS_IQUERY = ...
DNS_STATUS = ...
DNS_NOTIFY = ...
DNS_UPDATE = ...
DNS_CD = ...
DNS_AD = ...
DNS_Z = ...
DNS_RA = ...
DNS_RD = ...
DNS_TC = ...
DNS_AA = ...
DNS_QR = ...
DNS_RCODE_NOERR = ...
DNS_RCODE_FORMERR = ...
DNS_RCODE_SERVFAIL = ...
DNS_RCODE_NXDOMAIN = ...
DNS_RCODE_NOTIMP = ...
DNS_RCODE_REFUSED = ...
DNS_RCODE_YXDOMAIN = ...
DNS_RCODE_YXRRSET = ...
DNS_RCODE_NXRRSET = ...
DNS_RCODE_NOTAUTH = ...
DNS_RCODE_NOTZONE = ...
DNS_A = ...
DNS_NS = ...
DNS_CNAME = ...
DNS_SOA = ...
DNS_NULL = ...
DNS_PTR = ...
DNS_HINFO = ...
DNS_MX = ...
DNS_TXT = ...
DNS_AAAA = ...
DNS_SRV = ...
DNS_OPT = ...
DNS_IN = ...
DNS_CHAOS = ...
DNS_HESIOD = ...
DNS_ANY = ...
def pack_name(name, off, label_ptrs): # -> bytes:
    ...

def unpack_name(buf, off): # -> tuple[str, Any]:
    ...

class DNS(dpkt.Packet):
    """Domain Name System.

    The Domain Name System (DNS) is the hierarchical and decentralized naming system used to identify computers,
    services, and other resources reachable through the Internet or other Internet Protocol (IP) networks.
    The resource records contained in the DNS associate domain names with other forms of information.

    Attributes:
        __hdr__ (tuple(header_name, c_type, offset)): Header fields of DNS.
            id: (int): Identification. Used to match request/reply packets.
            op: (int): Operation
            qd: (int): Query Definition
            an: (int): Answer
            ns: (int): Name Server
            ar: (int): Additional Record
    """
    __hdr__ = ...
    @property
    def qr(self): # -> int:
        """DNS Query/Response. 1 bit"""
        ...
    
    @qr.setter
    def qr(self, v): # -> None:
        ...
    
    @property
    def opcode(self):
        """Operation code. 4 bits."""
        ...
    
    @opcode.setter
    def opcode(self, v): # -> None:
        ...
    
    @property
    def aa(self): # -> int:
        """Authoritative Answer. 1 bit.
        Specifies that the responding name server is an authority for the domain name in question section."""
        ...
    
    @aa.setter
    def aa(self, v): # -> None:
        ...
    
    @property
    def tc(self): # -> int:
        """Truncated. 1 bit. Indicates that only the first 512 bytes of the reply was returned."""
        ...
    
    @tc.setter
    def tc(self, v): # -> None:
        ...
    
    @property
    def rd(self): # -> int:
        """Recursion Desired. 1 bit. May be set in a query and is copied into the response.
        If set, the name server is directed to pursue the query recursively. Recursive query support is optional."""
        ...
    
    @rd.setter
    def rd(self, v): # -> None:
        ...
    
    @property
    def ra(self): # -> int:
        """Recursion Available. 1 bit. Indicates if recursive query support is available in the name server."""
        ...
    
    @ra.setter
    def ra(self, v): # -> None:
        ...
    
    @property
    def zero(self): # -> int:
        """Zero 1 bit"""
        ...
    
    @zero.setter
    def zero(self, v): # -> None:
        ...
    
    @property
    def rcode(self):
        """Return code. 4 bits."""
        ...
    
    @rcode.setter
    def rcode(self, v): # -> None:
        ...
    
    class Q(dpkt.Packet):
        """DNS question."""
        __hdr__ = ...
        def __len__(self):
            ...
        
        __str__ = ...
        def unpack(self, buf):
            ...
        
    
    
    class RR(Q):
        """DNS resource record."""
        __hdr__ = ...
        def pack_rdata(self, off, label_ptrs): # -> bytes:
            ...
        
        def unpack_rdata(self, buf, off): # -> None:
            ...
        
    
    
    def pack_q(self, buf, q):
        """Append packed DNS question and return buf."""
        ...
    
    def unpack_q(self, buf, off): # -> tuple[Q, Any]:
        """Return DNS question and new offset."""
        ...
    
    def pack_rr(self, buf, rr):
        """Append packed DNS RR and return buf."""
        ...
    
    def unpack_rr(self, buf, off): # -> tuple[RR, Any]:
        """Return DNS RR and new offset."""
        ...
    
    def unpack(self, buf): # -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __bytes__(self): # -> bytes | Any:
        ...
    


def define_testdata(): # -> TestData:
    """
    Reference test data is stored in the dynamically defined class.

    It is created in this way so that we can import unhexlify only during
    testing, and not during normal use.
    """
    class TestData:
        ...
    
    

def test_basic(): # -> None:
    ...

class TryExceptException:
    def __init__(self, exception_type, msg=...) -> None:
        ...
    
    def __call__(self, f, *args, **kwargs): # -> Callable[..., None]:
        ...
    


@TryExceptException(Exception, msg='There should have been an Exception raised')
def test_TryExceptException(): # -> None:
    """Check that we can catch a function which does not throw an exception when it is supposed to"""
    ...

@TryExceptException(NotImplementedError)
def test_Q_len(): # -> None:
    """Test in place for when the method is written"""
    ...

@TryExceptException(NotImplementedError)
def test_Q_unpack(): # -> None:
    """Test in place for when the method is written"""
    ...

def property_runner(prop, ops, set_to=...): # -> None:
    ...

def test_qr(): # -> None:
    ...

def test_opcode(): # -> None:
    ...

def test_aa(): # -> None:
    ...

def test_tc(): # -> None:
    ...

def test_rd(): # -> None:
    ...

def test_ra(): # -> None:
    ...

def test_zero(): # -> None:
    ...

def test_rcode(): # -> None:
    ...

def test_PTR(): # -> None:
    ...

def test_OPT(): # -> None:
    ...

def test_pack_name(): # -> None:
    ...

@TryExceptException(dpkt.UnpackError)
def test_unpack_name(): # -> None:
    """If the offset is longer than the buffer, there will be an UnpackError"""
    ...

@TryExceptException(dpkt.UnpackError)
def test_random_data(): # -> None:
    ...

@TryExceptException(dpkt.UnpackError)
def test_circular_pointers(): # -> None:
    ...

@TryExceptException(dpkt.UnpackError)
def test_very_long_name(): # -> None:
    ...

def test_null_response(): # -> None:
    ...

def test_txt_response(): # -> None:
    ...

def test_rdata_TXT(): # -> None:
    ...

def test_rdata_HINFO(): # -> None:
    ...

def test_rdata_rdata(): # -> None:
    ...

def test_rdata_A(): # -> None:
    ...

def test_rdata_NS(): # -> None:
    ...

def test_rdata_CNAME(): # -> None:
    ...

def test_rdata_PTR(): # -> None:
    ...

def test_rdata_SOA(): # -> None:
    ...

def test_rdata_MX(): # -> None:
    ...

def test_rdata_AAAA(): # -> None:
    ...

def test_rdata_SRV(): # -> None:
    ...

def test_rdata_OPT(): # -> None:
    ...

def test_dns_len(): # -> None:
    ...

@TryExceptException(dpkt.PackError)
def test_rdata_FAIL(): # -> None:
    ...

def test_soa(): # -> None:
    ...

def test_mx(): # -> None:
    ...

def test_aaaa(): # -> None:
    ...

def test_srv(): # -> None:
    ...

def test_cname(): # -> None:
    ...

@TryExceptException(dpkt.UnpackError)
def test_invalid_rr(): # -> None:
    ...

