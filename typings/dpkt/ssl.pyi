

from . import dpkt

"""Secure Sockets Layer / Transport Layer Security."""
class SSL2(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...



class TLS(dpkt.Packet):
    __hdr__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...

    def unpack(self, buf): # -> None:
        ...



SSL3_V = ...
TLS1_V = ...
TLS11_V = ...
TLS12_V = ...
ssl3_versions_str = ...
SSL3_VERSION_BYTES = ...
SSL3_AD_WARNING = ...
SSL3_AD_FATAL = ...
alert_level_str = ...
SSL3_AD_CLOSE_NOTIFY = ...
SSL3_AD_UNEXPECTED_MESSAGE = ...
SSL3_AD_BAD_RECORD_MAC = ...
SSL3_AD_DECOMPRESSION_FAILURE = ...
SSL3_AD_HANDSHAKE_FAILURE = ...
SSL3_AD_NO_CERTIFICATE = ...
SSL3_AD_BAD_CERTIFICATE = ...
SSL3_AD_UNSUPPORTED_CERTIFICATE = ...
SSL3_AD_CERTIFICATE_REVOKED = ...
SSL3_AD_CERTIFICATE_EXPIRED = ...
SSL3_AD_CERTIFICATE_UNKNOWN = ...
SSL3_AD_ILLEGAL_PARAMETER = ...
TLS1_AD_DECRYPTION_FAILED = ...
TLS1_AD_RECORD_OVERFLOW = ...
TLS1_AD_UNKNOWN_CA = ...
TLS1_AD_ACCESS_DENIED = ...
TLS1_AD_DECODE_ERROR = ...
TLS1_AD_DECRYPT_ERROR = ...
TLS1_AD_EXPORT_RESTRICTION = ...
TLS1_AD_PROTOCOL_VERSION = ...
TLS1_AD_INSUFFICIENT_SECURITY = ...
TLS1_AD_INTERNAL_ERROR = ...
TLS1_AD_USER_CANCELLED = ...
TLS1_AD_NO_RENEGOTIATION = ...
TLS1_AD_UNSUPPORTED_EXTENSION = ...
TLS1_AD_CERTIFICATE_UNOBTAINABLE = ...
TLS1_AD_UNRECOGNIZED_NAME = ...
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE = ...
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE = ...
TLS1_AD_UNKNOWN_PSK_IDENTITY = ...
alert_description_str = ...
_SIZE_FORMATS = ...
def parse_variable_array(buf, lenbytes): # -> tuple[Any, Any]:

    ...

def parse_extensions(buf): # -> list[Any]:

    ...

class SSL3Exception(Exception):
    ...


class TLSRecord(dpkt.Packet):

    __hdr__ = ...
    def __init__(self, *args, **kwargs) -> None:
        ...

    def unpack(self, buf): # -> None:
        ...



class TLSChangeCipherSpec(dpkt.Packet):

    __hdr__ = ...


class TLSAppData(str):

    ...


class TLSAlert(dpkt.Packet):
    __hdr__ = ...


class TLSHelloRequest(dpkt.Packet):
    __hdr__ = ...


class TLSClientHello(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...



class TLSServerHello(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...

    @property
    def cipher_suite(self): # -> CipherSuite:
        ...

    @property
    def compression(self): # -> Any:
        ...



class TLSCertificate(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...



class TLSUnknownHandshake(dpkt.Packet):
    __hdr__ = ...


TLSNewSessionTicket = TLSUnknownHandshake
TLSServerKeyExchange = TLSUnknownHandshake
TLSCertificateRequest = TLSUnknownHandshake
TLSServerHelloDone = TLSUnknownHandshake
TLSCertificateVerify = TLSUnknownHandshake
TLSClientKeyExchange = TLSUnknownHandshake
TLSFinished = TLSUnknownHandshake
HANDSHAKE_TYPES = ...
class TLSHandshake(dpkt.Packet):

    __hdr__ = ...
    __pprint_funcs__ = ...
    def unpack(self, buf): # -> None:
        ...

    @property
    def length(self): # -> Any:
        ...



RECORD_TYPES = ...
class SSLFactory:
    def __new__(cls, buf): # -> TLSRecord | SSL2:
        ...



def tls_multi_factory(buf): # -> tuple[list[Any], int]:

    ...

_hexdecode = ...
class TestTLS:

    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_records_length(self): # -> None:
        ...

    def test_record_type(self): # -> None:
        ...

    def test_record_version(self): # -> None:
        ...



class TestTLSRecord:

    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_content_type(self): # -> None:
        ...

    def test_version(self): # -> None:
        ...

    def test_length(self): # -> None:
        ...

    def test_data(self): # -> None:
        ...

    def test_initial_flags(self): # -> None:
        ...

    def test_repack(self): # -> None:
        ...

    def test_total_length(self): # -> None:
        ...

    def test_raises_need_data_when_buf_is_short(self): # -> None:
        ...



class TestTLSChangeCipherSpec:

    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_parses(self): # -> None:
        ...

    def test_total_length(self): # -> None:
        ...



class TestTLSAppData:

    def test_value(self): # -> None:
        ...



class TestTLSHandshake:
    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_created_inside_message(self): # -> None:
        ...

    def test_length(self): # -> None:
        ...

    def test_raises_need_data(self): # -> None:
        ...



class TestClientHello:

    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_client_hello_constructed(self): # -> None:

        ...

    def test_client_random_correct(self): # -> None:
        ...

    def test_ciphersuites(self): # -> None:
        ...

    def test_session_id(self): # -> None:
        ...

    def test_compression_methods(self): # -> None:
        ...

    def test_total_length(self): # -> None:
        ...



class TestServerHello:

    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_constructed(self): # -> None:
        ...

    def test_random_correct(self): # -> None:
        ...

    def test_ciphersuite(self): # -> None:
        ...

    def test_compression_method(self): # -> None:
        ...

    def test_total_length(self): # -> None:
        ...



class TestTLSCertificate:

    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_num_certs(self): # -> None:
        ...



class TestTLSMultiFactory:

    @classmethod
    def setup_class(cls): # -> None:
        ...

    def test_num_messages(self): # -> None:
        ...

    def test_bytes_parsed(self): # -> None:
        ...

    def test_first_msg_data(self): # -> None:
        ...

    def test_second_msg_data(self): # -> None:
        ...

    def test_incomplete(self): # -> None:
        ...



def test_ssl2(): # -> None:
    ...

def test_clienthello_invalidcipher(): # -> None:
    ...

def test_serverhello_invalidcipher(): # -> None:
    ...

def test_tlscertificate_unpacking_error(): # -> None:
    ...

def test_tlshandshake_invalid_type(): # -> None:
    ...

def test_sslfactory(): # -> None:
    ...

def test_extensions(): # -> None:
    ...
