"""
This type stub file was generated by pyright.
"""

from . import dpkt

"""Internet Protocol, version 6."""
EXT_HDRS = ...
class IP6(dpkt.Packet):
    """Internet Protocol, version 6.

    Internet Protocol version 6 (IPv6) is the most recent version of the Internet Protocol (IP),
    the communications protocol that provides an identification and location system for computers
    on networks and routes traffic across the Internet. IPv6 was developed by the Internet Engineering
    Task Force (IETF) to deal with the long-anticipated problem of IPv4 address exhaustion,
    and is intended to replace IPv4.

    Attributes:
        __hdr__: Header fields of IPv6.
            _v_fc_flow:
                v: (int): Version (4 bits),
                fc (int): Traffic Class (6+2 bits)
                flow (int): Flow Label (20 bits).
            plen: (int): Payload Length (2 bytes). The size of the payload in octets, including any extension headers.
            nxt: (bytes): Next Header (1 byte). Specifies the type of the next header.
            hlim: (bytes): Hop Limit (1 byte). Replaces the time to live field in IPv4.
            src: (int): Source Address (16 bytes). The unicast IPv6 address of the sending node.
            dst: (int): Destination Address (16 bytes). Unicast or multicast address of the destination node(s).
    """
    __hdr__ = ...
    __bit_fields__ = ...
    __pprint_funcs__ = ...
    _protosw = ...
    def unpack(self, buf): # -> None:
        ...
    
    def headers_str(self): # -> tuple[Any, bytes]:
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    
    def __len__(self):
        ...
    
    @classmethod
    def set_proto(cls, p, pktclass): # -> None:
        ...
    
    @classmethod
    def get_proto(cls, p):
        ...
    


class IP6ExtensionHeader(dpkt.Packet):
    """
    An extension header is very similar to a 'sub-packet'.
    We just want to re-use all the hdr unpacking etc.
    """
    ...


class IP6OptsHeader(IP6ExtensionHeader):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...
    


class IP6HopOptsHeader(IP6OptsHeader):
    ...


class IP6DstOptsHeader(IP6OptsHeader):
    ...


class IP6RoutingHeader(IP6ExtensionHeader):
    __hdr__ = ...
    __bit_fields__ = ...
    def unpack(self, buf): # -> None:
        ...
    


class IP6FragmentHeader(IP6ExtensionHeader):
    __hdr__ = ...
    __bit_fields__ = ...
    def unpack(self, buf): # -> None:
        ...
    


class IP6AHHeader(IP6ExtensionHeader):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...
    


class IP6ESPHeader(IP6ExtensionHeader):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...
    


EXT_HDRS_CLS = ...
def test_ipg(): # -> None:
    ...

def test_dict(): # -> None:
    ...

def test_ip6_routing_header(): # -> None:
    ...

def test_ip6_fragment_header(): # -> None:
    ...

def test_ip6_options_header(): # -> None:
    ...

def test_ip6_ah_header(): # -> None:
    ...

def test_ip6_esp_header(): # -> None:
    ...

def test_ip6_extension_headers(): # -> None:
    ...

def test_ip6_all_extension_headers(): # -> None:
    ...

def test_ip6_gen_tcp_ack(): # -> None:
    ...

def test_ip6_opts(): # -> None:
    ...

def test_ip6_routing_properties(): # -> None:
    ...

def test_ip6_fragment_properties(): # -> None:
    ...

def test_ip6_properties(): # -> None:
    ...

def test_proto_accessors(): # -> None:
    class Proto:
        ...
    
    

def test_ip6_fragment_no_decode(): # -> None:
    ...

