

from . import dpkt

"""Diameter."""
ABORT_SESSION = ...
ACCOUNTING = ...
CAPABILITIES_EXCHANGE = ...
DEVICE_WATCHDOG = ...
DISCONNECT_PEER = ...
RE_AUTH = ...
SESSION_TERMINATION = ...
class Diameter(dpkt.Packet):

    __hdr__ = ...
    @property
    def request_flag(self):
        ...

    @request_flag.setter
    def request_flag(self, r): # -> None:
        ...

    @property
    def proxiable_flag(self):
        ...

    @proxiable_flag.setter
    def proxiable_flag(self, p): # -> None:
        ...

    @property
    def error_flag(self):
        ...

    @error_flag.setter
    def error_flag(self, e): # -> None:
        ...

    @property
    def retransmit_flag(self):
        ...

    @retransmit_flag.setter
    def retransmit_flag(self, t): # -> None:
        ...

    def unpack(self, buf): # -> None:
        ...

    def pack_hdr(self): # -> bytes:
        ...

    def __len__(self):
        ...

    def __bytes__(self): # -> bytes:
        ...



class AVP(dpkt.Packet):
    __hdr__ = ...
    @property
    def vendor_flag(self):
        ...

    @vendor_flag.setter
    def vendor_flag(self, v): # -> None:
        ...

    @property
    def mandatory_flag(self):
        ...

    @mandatory_flag.setter
    def mandatory_flag(self, m): # -> None:
        ...

    @property
    def protected_flag(self):
        ...

    @protected_flag.setter
    def protected_flag(self, p): # -> None:
        ...

    def unpack(self, buf): # -> None:
        ...

    def pack_hdr(self): # -> bytes:
        ...

    def __len__(self):
        ...



__s = ...
__t = ...
def test_pack(): # -> None:
    ...

def test_unpack(): # -> None:
    ...

def test_diameter_properties(): # -> None:
    ...

def test_avp_properties(): # -> None:
    ...
