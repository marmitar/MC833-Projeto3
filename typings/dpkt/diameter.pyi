"""
This type stub file was generated by pyright.
"""

from . import dpkt

"""Diameter."""
ABORT_SESSION = ...
ACCOUNTING = ...
CAPABILITIES_EXCHANGE = ...
DEVICE_WATCHDOG = ...
DISCONNECT_PEER = ...
RE_AUTH = ...
SESSION_TERMINATION = ...
class Diameter(dpkt.Packet):
    """Diameter.

    Diameter is an authentication, authorization, and accounting protocol for computer networks. It evolved from the
    earlier RADIUS protocol. It belongs to the application layer protocols in the internet protocol suite.

    Attributes:
        __hdr__: Header fields of Diameter.
            v: (int) Version. The version of the Diameter Base Protocol.
                As of 2014, the only value supported is 1. (1 byte)
            len: (bytes): Message Length. The Message Length field indicates the length of the Diameter message in
                bytes, including the header fields and the padded AVPs. (3 bytes)
            flags: (int): Command flags. (Request, Proxiable, Error, Potentially re-transmitted message) (1 byte)
            cmd: (bytes): Commands. Determine the action that is to be taken for a particular message. (3 bytes)
            app_id: (int): Application-ID. Application-ID is used to identify for which Diameter application the
                message is applicable. (4 bytes)
            hop_id: (int): Hop-by-Hop Identifier. Used to match the requests with their answers as the same value in
                the request is used in the response. (4 bytes)
            end_id: (int): End-to-End Identifier. used to detect duplicate messages along with the combination of the
                Origin-Host AVP. (4 bytes)
    """
    __hdr__ = ...
    @property
    def request_flag(self):
        ...
    
    @request_flag.setter
    def request_flag(self, r): # -> None:
        ...
    
    @property
    def proxiable_flag(self):
        ...
    
    @proxiable_flag.setter
    def proxiable_flag(self, p): # -> None:
        ...
    
    @property
    def error_flag(self):
        ...
    
    @error_flag.setter
    def error_flag(self, e): # -> None:
        ...
    
    @property
    def retransmit_flag(self):
        ...
    
    @retransmit_flag.setter
    def retransmit_flag(self, t): # -> None:
        ...
    
    def unpack(self, buf): # -> None:
        ...
    
    def pack_hdr(self): # -> bytes:
        ...
    
    def __len__(self):
        ...
    
    def __bytes__(self): # -> bytes:
        ...
    


class AVP(dpkt.Packet):
    __hdr__ = ...
    @property
    def vendor_flag(self):
        ...
    
    @vendor_flag.setter
    def vendor_flag(self, v): # -> None:
        ...
    
    @property
    def mandatory_flag(self):
        ...
    
    @mandatory_flag.setter
    def mandatory_flag(self, m): # -> None:
        ...
    
    @property
    def protected_flag(self):
        ...
    
    @protected_flag.setter
    def protected_flag(self, p): # -> None:
        ...
    
    def unpack(self, buf): # -> None:
        ...
    
    def pack_hdr(self): # -> bytes:
        ...
    
    def __len__(self):
        ...
    


__s = ...
__t = ...
def test_pack(): # -> None:
    ...

def test_unpack(): # -> None:
    ...

def test_diameter_properties(): # -> None:
    ...

def test_avp_properties(): # -> None:
    ...

