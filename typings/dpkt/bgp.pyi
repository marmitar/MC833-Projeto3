

from . import dpkt

"""Border Gateway Protocol."""
OPEN = ...
UPDATE = ...
NOTIFICATION = ...
KEEPALIVE = ...
ROUTE_REFRESH = ...
ORIGIN = ...
AS_PATH = ...
NEXT_HOP = ...
MULTI_EXIT_DISC = ...
LOCAL_PREF = ...
ATOMIC_AGGREGATE = ...
AGGREGATOR = ...
COMMUNITIES = ...
ORIGINATOR_ID = ...
CLUSTER_LIST = ...
MP_REACH_NLRI = ...
MP_UNREACH_NLRI = ...
ORIGIN_IGP = ...
ORIGIN_EGP = ...
INCOMPLETE = ...
AS_SET = ...
AS_SEQUENCE = ...
AS_CONFED_SEQUENCE = ...
AS_CONFED_SET = ...
NO_EXPORT = ...
NO_ADVERTISE = ...
NO_EXPORT_SUBCONFED = ...
NO_PEER = ...
AFI_IPV4 = ...
AFI_IPV6 = ...
AFI_L2VPN = ...
SAFI_UNICAST = ...
SAFI_MULTICAST = ...
SAFI_UNICAST_MULTICAST = ...
SAFI_EVPN = ...
AUTHENTICATION = ...
CAPABILITY = ...
CAP_MULTIPROTOCOL = ...
CAP_ROUTE_REFRESH = ...
MESSAGE_HEADER_ERROR = ...
OPEN_MESSAGE_ERROR = ...
UPDATE_MESSAGE_ERROR = ...
HOLD_TIMER_EXPIRED = ...
FSM_ERROR = ...
CEASE = ...
CONNECTION_NOT_SYNCHRONIZED = ...
BAD_MESSAGE_LENGTH = ...
BAD_MESSAGE_TYPE = ...
UNSUPPORTED_VERSION_NUMBER = ...
BAD_PEER_AS = ...
BAD_BGP_IDENTIFIER = ...
UNSUPPORTED_OPTIONAL_PARAMETER = ...
AUTHENTICATION_FAILURE = ...
UNACCEPTABLE_HOLD_TIME = ...
UNSUPPORTED_CAPABILITY = ...
MALFORMED_ATTRIBUTE_LIST = ...
UNRECOGNIZED_ATTRIBUTE = ...
MISSING_ATTRIBUTE = ...
ATTRIBUTE_FLAGS_ERROR = ...
ATTRIBUTE_LENGTH_ERROR = ...
INVALID_ORIGIN_ATTRIBUTE = ...
AS_ROUTING_LOOP = ...
INVALID_NEXT_HOP_ATTRIBUTE = ...
OPTIONAL_ATTRIBUTE_ERROR = ...
INVALID_NETWORK_FIELD = ...
MALFORMED_AS_PATH = ...
MAX_NUMBER_OF_PREFIXES_REACHED = ...
ADMINISTRATIVE_SHUTDOWN = ...
PEER_DECONFIGURED = ...
ADMINISTRATIVE_RESET = ...
CONNECTION_REJECTED = ...
OTHER_CONFIGURATION_CHANGE = ...
CONNECTION_COLLISION_RESOLUTION = ...
OUT_OF_RESOURCES = ...
class BGP(dpkt.Packet):

    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...

    class Open(dpkt.Packet):
        __hdr__ = ...
        __hdr_defaults__ = ...
        def unpack(self, buf): # -> None:
            ...

        def __len__(self):
            ...

        def __bytes__(self): # -> bytes:
            ...

        class Parameter(dpkt.Packet):
            __hdr__ = ...
            def unpack(self, buf): # -> None:
                ...

            class Authentication(dpkt.Packet):
                __hdr__ = ...


            class Capability(dpkt.Packet):
                __hdr__ = ...
                def unpack(self, buf): # -> None:
                    ...







    class Update(dpkt.Packet):
        __hdr_defaults__ = ...
        def unpack(self, buf): # -> None:
            ...

        def __len__(self): # -> int:
            ...

        def __bytes__(self): # -> bytes:
            ...

        class Attribute(dpkt.Packet):
            __hdr__ = ...
            @property
            def optional(self):
                ...

            @optional.setter
            def optional(self, o): # -> None:
                ...

            @property
            def transitive(self):
                ...

            @transitive.setter
            def transitive(self, t): # -> None:
                ...

            @property
            def partial(self):
                ...

            @partial.setter
            def partial(self, p): # -> None:
                ...

            @property
            def extended_length(self):
                ...

            @extended_length.setter
            def extended_length(self, e): # -> None:
                ...

            def unpack(self, buf): # -> None:
                ...

            def __len__(self):
                ...

            def __bytes__(self): # -> bytes:
                ...

            class Origin(dpkt.Packet):
                __hdr__ = ...


            class ASPath(dpkt.Packet):
                __hdr_defaults__ = ...
                def unpack(self, buf): # -> None:
                    ...

                def __len__(self): # -> int:
                    ...

                def __bytes__(self): # -> bytes:
                    ...

                class ASPathSegment(dpkt.Packet):
                    __hdr__ = ...
                    def unpack(self, buf): # -> None:
                        ...

                    def __len__(self):
                        ...

                    def __bytes__(self): # -> bytes:
                        ...



                class ASPathSegment4(dpkt.Packet):
                    __hdr__ = ...
                    def unpack(self, buf): # -> None:
                        ...

                    def __len__(self):
                        ...

                    def __bytes__(self): # -> bytes:
                        ...





            class NextHop(dpkt.Packet):
                __hdr__ = ...


            class MultiExitDisc(dpkt.Packet):
                __hdr__ = ...


            class LocalPref(dpkt.Packet):
                __hdr__ = ...


            class AtomicAggregate(dpkt.Packet):
                def unpack(self, buf): # -> None:
                    ...

                def __len__(self): # -> Literal[0]:
                    ...

                def __bytes__(self): # -> Literal[b""]:
                    ...



            class Aggregator(dpkt.Packet):
                __hdr__ = ...


            class Communities(dpkt.Packet):
                __hdr_defaults__ = ...
                def unpack(self, buf): # -> None:
                    ...

                def __len__(self): # -> int:
                    ...

                def __bytes__(self): # -> bytes:
                    ...

                class Community(dpkt.Packet):
                    __hdr__ = ...


                class ReservedCommunity(dpkt.Packet):
                    __hdr__ = ...




            class OriginatorID(dpkt.Packet):
                __hdr__ = ...


            class ClusterList(dpkt.Packet):
                __hdr_defaults__ = ...
                def unpack(self, buf): # -> None:
                    ...

                def __len__(self): # -> int:
                    ...

                def __bytes__(self): # -> bytes:
                    ...



            class MPReachNLRI(dpkt.Packet):
                __hdr__ = ...
                def unpack(self, buf): # -> None:
                    ...

                def __len__(self):
                    ...

                def __bytes__(self): # -> bytes:
                    ...

                class SNPA(dpkt.Packet):
                    __hdr__ = ...
                    def unpack(self, buf): # -> None:
                        ...





            class MPUnreachNLRI(dpkt.Packet):
                __hdr__ = ...
                def unpack(self, buf): # -> None:
                    ...

                def __len__(self):
                    ...

                def __bytes__(self): # -> bytes:
                    ...







    class Notification(dpkt.Packet):
        __hdr__ = ...
        def unpack(self, buf): # -> None:
            ...



    class Keepalive(dpkt.Packet):
        def unpack(self, buf): # -> None:
            ...

        def __len__(self): # -> Literal[0]:
            ...

        def __bytes__(self): # -> Literal[b""]:
            ...



    class RouteRefresh(dpkt.Packet):
        __hdr__ = ...




class RouteGeneric(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...



class RouteIPV4(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...

    def __repr__(self): # -> str:
        ...

    def __len__(self):
        ...

    def __bytes__(self): # -> bytes:
        ...



class ExtendedRouteIPV4(RouteIPV4):
    __hdr__ = ...
    def __repr__(self): # -> str:
        ...



class RouteIPV6(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...

    def __len__(self):
        ...

    def __bytes__(self): # -> bytes:
        ...



class RouteEVPN(dpkt.Packet):
    __hdr__ = ...
    def unpack(self, buf): # -> None:
        ...

    def __len__(self):
        ...

    def __bytes__(self): # -> bytes:
        ...



__bgp1 = ...
__bgp2 = ...
__bgp3 = ...
__bgp4 = ...
__bgp5 = ...
__bgp6 = ...
__bgp7 = ...
__bgp8 = ...
__bgp9 = ...
def test_pack(): # -> None:
    ...

def test_unpack(): # -> None:
    ...

def test_bgp_mp_nlri_20_1_mp_reach_nlri_next_hop(): # -> None:
    ...

def test_bgp_add_path_6_1_as_path(): # -> None:
    ...

def test_attribute_accessors(): # -> None:
    ...

def test_snpa(): # -> None:
    ...

def test_mpreachnlri(): # -> None:
    ...

def test_notification(): # -> None:
    ...

def test_keepalive(): # -> None:
    ...

def test_routegeneric(): # -> None:
    ...

def test_routeipv4(): # -> None:
    ...

def test_routeipv6(): # -> None:
    ...

def test_extendedrouteipv4(): # -> None:
    ...

def test_routeevpn(): # -> None:
    ...

def test_route_refresh(): # -> None:
    ...

def test_mpunreachnlri(): # -> None:
    ...

def test_update_withdrawn(): # -> None:
    ...

def test_parameters(): # -> None:
    ...

def test_reservedcommunities(): # -> None:
    ...
