"""
This type stub file was generated by pyright.
"""

import io
import os
import multiprocessing
import dpkt
from typing import List
from concurrent.futures import Future, ProcessPoolExecutor
from logging import debug, info

"""Loads a PCAP file and counts contents with various levels of storage"""
class PCAPParallel:
    """Quickly reads a PCAP file and splits the contents.

    Each file is split into multiple io.BytesIO streams, which will
    result in loading the entire contents into memory.  Callbacks for
    each section will be executed in a separate process.
    """
    def __init__(self, pcap_file: str, callback=..., split_size: int = ..., maximum_count: int = ..., pcap_filter: str | None = ..., maximum_cores: int | None = ...) -> List[io.BytesIO]:
        ...
    
    def set_split_size(self): # -> int | None:
        "Attempt to calculate a reasonable split size"
        ...
    
    @staticmethod
    def open_maybe_compressed(filename): # -> GzipFile | TextIOWrapper[_WrappedBuffer] | BZ2File | LZMAFile | BufferedReader[_BufferedReaderStream]:
        """Opens a pcap file, potentially decompressing it."""
        ...
    
    def split(self) -> List[io.BytesIO] | List[Future]:
        "Does the actual reading and splitting"
        ...
    
    def save_packets(self): # -> None:
        "Saves the contents seen to this point into a new io.BytesIO"
        ...
    
    def dpkt_callback(self, timestamp: float, packet: bytes): # -> None:
        "Handles each packet received by dpkt"
        ...
    


