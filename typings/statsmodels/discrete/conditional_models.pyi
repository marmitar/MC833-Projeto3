"""
This type stub file was generated by pyright.
"""

import statsmodels.base.model as base
import statsmodels.regression.linear_model as lm

"""
Conditional logistic, Poisson, and multinomial logit regression
"""
class _ConditionalModel(base.LikelihoodModel):
    def __init__(self, endog, exog, missing=..., **kwargs) -> None:
        ...

    def hessian(self, params): # -> NDArray[Any]:
        ...

    def fit(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., fargs=..., callback=..., retall=..., skip_hessian=..., **kwargs): # -> ConditionalResultsWrapper:
        ...

    def fit_regularized(self, method=..., alpha=..., start_params=..., refit=..., **kwargs): # -> RegularizedResultsWrapper:
        """
        Return a regularized fit to a linear regression model.

        Parameters
        ----------
        method : {'elastic_net'}
            Only the `elastic_net` approach is currently implemented.
        alpha : scalar or array_like
            The penalty weight.  If a scalar, the same penalty weight
            applies to all variables in the model.  If a vector, it
            must have the same length as `params`, and contains a
            penalty weight for each coefficient.
        start_params : array_like
            Starting values for `params`.
        refit : bool
            If True, the model is refit using only the variables that
            have non-zero coefficients in the regularized fit.  The
            refitted model is not regularized.
        **kwargs
            Additional keyword argument that are used when fitting the model.

        Returns
        -------
        Results
            A results instance.
        """
        ...

    @classmethod
    def from_formula(cls, formula, data, subset=..., drop_cols=..., *args, **kwargs): # -> Self:
        ...



class ConditionalLogit(_ConditionalModel):
    """
    Fit a conditional logistic regression model to grouped data.

    Every group is implicitly given an intercept, but the model is fit using
    a conditional likelihood in which the intercepts are not present.  Thus,
    intercept estimates are not given, but the other parameter estimates can
    be interpreted as being adjusted for any group-level confounders.

    Parameters
    ----------
    endog : array_like
        The response variable, must contain only 0 and 1.
    exog : array_like
        The array of covariates.  Do not include an intercept
        in this array.
    groups : array_like
        Codes defining the groups. This is a required keyword parameter.
    """
    def __init__(self, endog, exog, missing=..., **kwargs) -> None:
        ...

    def loglike(self, params): # -> Any | Literal[0]:
        ...

    def score(self, params): # -> Literal[0]:
        ...

    def loglike_grp(self, grp, params): # -> Any:
        ...

    def score_grp(self, grp, params):
        ...



class ConditionalPoisson(_ConditionalModel):
    """
    Fit a conditional Poisson regression model to grouped data.

    Every group is implicitly given an intercept, but the model is fit using
    a conditional likelihood in which the intercepts are not present.  Thus,
    intercept estimates are not given, but the other parameter estimates can
    be interpreted as being adjusted for any group-level confounders.

    Parameters
    ----------
    endog : array_like
        The response variable
    exog : array_like
        The covariates
    groups : array_like
        Codes defining the groups. This is a required keyword parameter.
    """
    def loglike(self, params): # -> float:
        ...

    def score(self, params): # -> float:
        ...



class ConditionalResults(base.LikelihoodModelResults):
    def __init__(self, model, params, normalized_cov_params, scale) -> None:
        ...

    def summary(self, yname=..., xname=..., title=..., alpha=...): # -> Summary:
        """
        Summarize the fitted model.

        Parameters
        ----------
        yname : str, optional
            Default is `y`
        xname : list[str], optional
            Names for the exogenous variables, default is "var_xx".
            Must match the number of parameters in the model
        title : str, optional
            Title for the top table. If not None, then this replaces the
            default title
        alpha : float
            Significance level for the confidence intervals

        Returns
        -------
        smry : Summary instance
            This holds the summary tables and text, which can be printed or
            converted to various output formats.

        See Also
        --------
        statsmodels.iolib.summary.Summary : class to hold summary
            results
        """
        ...



class ConditionalMNLogit(_ConditionalModel):
    """
    Fit a conditional multinomial logit model to grouped data.

    Parameters
    ----------
    endog : array_like
        The dependent variable, must be integer-valued, coded
        0, 1, ..., c-1, where c is the number of response
        categories.
    exog : array_like
        The independent variables.
    groups : array_like
        Codes defining the groups. This is a required keyword parameter.

    Notes
    -----
    Equivalent to femlogit in Stata.

    References
    ----------
    Gary Chamberlain (1980).  Analysis of covariance with qualitative
    data. The Review of Economic Studies.  Vol. 47, No. 1, pp. 225-238.
    """
    def __init__(self, endog, exog, missing=..., **kwargs) -> None:
        ...

    def fit(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., fargs=..., callback=..., retall=..., skip_hessian=..., **kwargs): # -> MultinomialResultsWrapper:
        ...

    def loglike(self, params): # -> float | Any:
        ...

    def score(self, params): # -> ndarray[tuple[int], dtype[float64]] | Any:
        ...



class ConditionalResultsWrapper(lm.RegressionResultsWrapper):
    ...
