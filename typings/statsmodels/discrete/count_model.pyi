"""
This type stub file was generated by pyright.
"""

import statsmodels.regression.linear_model as lm
from statsmodels.discrete.discrete_model import CountModel, CountResults, DiscreteModel, L1CountResults
from statsmodels.compat.pandas import Appender

__all__ = ["ZeroInflatedPoisson", "ZeroInflatedGeneralizedPoisson", "ZeroInflatedNegativeBinomialP"]
_doc_zi_params = ...
class GenericZeroInflated(CountModel):
    __doc__ = ...
    def __init__(self, endog, exog, exog_infl=..., offset=..., inflation=..., exposure=..., missing=..., **kwargs) -> None:
        ...

    def loglike(self, params): # -> float64:
        """
        Loglikelihood of Generic Zero Inflated model.

        Parameters
        ----------
        params : array_like
            The parameters of the model.

        Returns
        -------
        loglike : float
            The log-likelihood function of the model evaluated at `params`.
            See notes.

        Notes
        -----
        .. math:: \\ln L=\\sum_{y_{i}=0}\\ln(w_{i}+(1-w_{i})*P_{main\\_model})+
            \\sum_{y_{i}>0}(\\ln(1-w_{i})+L_{main\\_model})
            where P - pdf of main model, L - loglike function of main model.
        """
        ...

    def loglikeobs(self, params): # -> NDArray[float64]:
        """
        Loglikelihood for observations of Generic Zero Inflated model.

        Parameters
        ----------
        params : array_like
            The parameters of the model.

        Returns
        -------
        loglike : ndarray
            The log likelihood for each observation of the model evaluated
            at `params`. See Notes for definition.

        Notes
        -----
        .. math:: \\ln L=\\ln(w_{i}+(1-w_{i})*P_{main\\_model})+
            \\ln(1-w_{i})+L_{main\\_model}
            where P - pdf of main model, L - loglike function of main model.

        for observations :math:`i=1,...,n`
        """
        ...

    @Appender(DiscreteModel.fit.__doc__)
    def fit(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., callback=..., cov_type=..., cov_kwds=..., use_t=..., **kwargs):
        ...

    @Appender(DiscreteModel.fit_regularized.__doc__)
    def fit_regularized(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., callback=..., alpha=..., trim_mode=..., auto_trim_tol=..., size_trim_tol=..., qc_tol=..., **kwargs):
        ...

    def score_obs(self, params): # -> ndarray[tuple[int], dtype[Any]] | ndarray[_AnyShape, dtype[Any]] | NDArray[float64]:
        """
        Generic Zero Inflated model score (gradient) vector of the log-likelihood

        Parameters
        ----------
        params : array_like
            The parameters of the model

        Returns
        -------
        score : ndarray, 1-D
            The score vector of the model, i.e. the first derivative of the
            loglikelihood function, evaluated at `params`
        """
        ...

    def score(self, params): # -> Any:
        ...

    def hessian(self, params): # -> NDArray[floating[Any]] | _Array[tuple[int, int], float64]:
        """
        Generic Zero Inflated model Hessian matrix of the loglikelihood

        Parameters
        ----------
        params : array_like
            The parameters of the model

        Returns
        -------
        hess : ndarray, (k_vars, k_vars)
            The Hessian, second derivative of loglikelihood function,
            evaluated at `params`

        Notes
        -----
        """
        ...

    def predict(self, params, exog=..., exog_infl=..., exposure=..., offset=..., which=..., y_values=...): # -> Any:
        """
        Predict expected response or other statistic given exogenous variables.

        Parameters
        ----------
        params : array_like
            The parameters of the model.
        exog : ndarray, optional
            Explanatory variables for the main count model.
            If ``exog`` is None, then the data from the model will be used.
        exog_infl : ndarray, optional
            Explanatory variables for the zero-inflation model.
            ``exog_infl`` has to be provided if ``exog`` was provided unless
            ``exog_infl`` in the model is only a constant.
        offset : ndarray, optional
            Offset is added to the linear predictor of the mean function with
            coefficient equal to 1.
            Default is zero if exog is not None, and the model offset if exog
            is None.
        exposure : ndarray, optional
            Log(exposure) is added to the linear predictor with coefficient
            equal to 1. If exposure is specified, then it will be logged by
            the method. The user does not need to log it first.
            Default is one if exog is is not None, and it is the model exposure
            if exog is None.
        which : str (optional)
            Statitistic to predict. Default is 'mean'.

            - 'mean' : the conditional expectation of endog E(y | x). This
              takes inflated zeros into account.
            - 'linear' : the linear predictor of the mean function.
            - 'var' : returns the estimated variance of endog implied by the
              model.
            - 'mean-main' : mean of the main count model
            - 'prob-main' : probability of selecting the main model.
                The probability of zero inflation is ``1 - prob-main``.
            - 'mean-nonzero' : expected value conditional on having observation
              larger than zero, E(y | X, y>0)
            - 'prob-zero' : probability of observing a zero count. P(y=0 | x)
            - 'prob' : probabilities of each count from 0 to max(endog), or
              for y_values if those are provided. This is a multivariate
              return (2-dim when predicting for several observations).

        y_values : array_like
            Values of the random variable endog at which pmf is evaluated.
            Only used if ``which="prob"``
        """
        ...



class ZeroInflatedPoisson(GenericZeroInflated):
    __doc__ = ...
    def __init__(self, endog, exog, exog_infl=..., offset=..., exposure=..., inflation=..., missing=..., **kwargs) -> None:
        ...

    def get_distribution(self, params, exog=..., exog_infl=..., exposure=..., offset=...): # -> rv_continuous_frozen | rv_discrete_frozen:
        """Get frozen instance of distribution based on predicted parameters.

        Parameters
        ----------
        params : array_like
            The parameters of the model.
        exog : ndarray, optional
            Explanatory variables for the main count model.
            If ``exog`` is None, then the data from the model will be used.
        exog_infl : ndarray, optional
            Explanatory variables for the zero-inflation model.
            ``exog_infl`` has to be provided if ``exog`` was provided unless
            ``exog_infl`` in the model is only a constant.
        offset : ndarray, optional
            Offset is added to the linear predictor of the mean function with
            coefficient equal to 1.
            Default is zero if exog is not None, and the model offset if exog
            is None.
        exposure : ndarray, optional
            Log(exposure) is added to the linear predictor  of the mean
            function with coefficient equal to 1. If exposure is specified,
            then it will be logged by the method. The user does not need to
            log it first.
            Default is one if exog is is not None, and it is the model exposure
            if exog is None.

        Returns
        -------
        Instance of frozen scipy distribution subclass.
        """
        ...



class ZeroInflatedGeneralizedPoisson(GenericZeroInflated):
    __doc__ = ...
    def __init__(self, endog, exog, exog_infl=..., offset=..., exposure=..., inflation=..., p=..., missing=..., **kwargs) -> None:
        ...

    @Appender(ZeroInflatedPoisson.get_distribution.__doc__)
    def get_distribution(self, params, exog=..., exog_infl=..., exposure=..., offset=...): # -> rv_continuous_frozen | rv_discrete_frozen:
        ...



class ZeroInflatedNegativeBinomialP(GenericZeroInflated):
    __doc__ = ...
    def __init__(self, endog, exog, exog_infl=..., offset=..., exposure=..., inflation=..., p=..., missing=..., **kwargs) -> None:
        ...

    @Appender(ZeroInflatedPoisson.get_distribution.__doc__)
    def get_distribution(self, params, exog=..., exog_infl=..., exposure=..., offset=...): # -> rv_continuous_frozen | rv_discrete_frozen:
        ...



class ZeroInflatedResults(CountResults):
    def get_prediction(self, exog=..., exog_infl=..., exposure=..., offset=..., which=..., average=..., agg_weights=..., y_values=..., transform=..., row_labels=...): # -> PredictionResultsDelta:
        ...

    def get_influence(self): # -> MLEInfluence:
        """
        Influence and outlier measures

        See notes section for influence measures that do not apply for
        zero inflated models.

        Returns
        -------
        MLEInfluence
            The instance has methods to calculate the main influence and
            outlier measures as attributes.

        See Also
        --------
        statsmodels.stats.outliers_influence.MLEInfluence

        Notes
        -----
        ZeroInflated models have functions that are not differentiable
        with respect to sample endog if endog=0. This means that generalized
        leverage cannot be computed in the usual definition.

        Currently, both the generalized leverage, in `hat_matrix_diag`
        attribute and studetized residuals are not available. In the influence
        plot generalized leverage is replaced by a hat matrix diagonal that
        only takes combined exog into account, computed in the same way as
        for OLS. This is a measure for exog outliers but does not take
        specific features of the model into account.
        """
        ...



class ZeroInflatedPoissonResults(ZeroInflatedResults):
    __doc__ = ...
    def get_margeff(self, at=..., method=..., atexog=..., dummy=..., count=...):
        """Get marginal effects of the fitted model.

        Not yet implemented for Zero Inflated Models
        """
        ...



class L1ZeroInflatedPoissonResults(L1CountResults, ZeroInflatedPoissonResults):
    ...


class ZeroInflatedPoissonResultsWrapper(lm.RegressionResultsWrapper):
    ...


class L1ZeroInflatedPoissonResultsWrapper(lm.RegressionResultsWrapper):
    ...


class ZeroInflatedGeneralizedPoissonResults(ZeroInflatedResults):
    __doc__ = ...
    def get_margeff(self, at=..., method=..., atexog=..., dummy=..., count=...):
        """Get marginal effects of the fitted model.

        Not yet implemented for Zero Inflated Models
        """
        ...



class L1ZeroInflatedGeneralizedPoissonResults(L1CountResults, ZeroInflatedGeneralizedPoissonResults):
    ...


class ZeroInflatedGeneralizedPoissonResultsWrapper(lm.RegressionResultsWrapper):
    ...


class L1ZeroInflatedGeneralizedPoissonResultsWrapper(lm.RegressionResultsWrapper):
    ...


class ZeroInflatedNegativeBinomialResults(ZeroInflatedResults):
    __doc__ = ...
    def get_margeff(self, at=..., method=..., atexog=..., dummy=..., count=...):
        """Get marginal effects of the fitted model.

        Not yet implemented for Zero Inflated Models
        """
        ...



class L1ZeroInflatedNegativeBinomialResults(L1CountResults, ZeroInflatedNegativeBinomialResults):
    ...


class ZeroInflatedNegativeBinomialResultsWrapper(lm.RegressionResultsWrapper):
    ...


class L1ZeroInflatedNegativeBinomialResultsWrapper(lm.RegressionResultsWrapper):
    ...
