"""
This type stub file was generated by pyright.
"""

import statsmodels.regression.linear_model as lm
from statsmodels.discrete.discrete_model import CountModel, CountResults, L1CountResults
from statsmodels.tools.decorators import cache_readonly

__all__ = ["TruncatedLFPoisson", "TruncatedLFNegativeBinomialP", "HurdleCountModel"]
class TruncatedLFGeneric(CountModel):
    __doc__ = ...
    def __init__(self, endog, exog, truncation=..., offset=..., exposure=..., missing=..., **kwargs) -> None:
        ...

    def loglike(self, params):
        """
        Loglikelihood of Generic Truncated model

        Parameters
        ----------
        params : array-like
            The parameters of the model.

        Returns
        -------
        loglike : float
            The log-likelihood function of the model evaluated at `params`.
            See notes.

        Notes
        -----

        """
        ...

    def loglikeobs(self, params):
        """
        Loglikelihood for observations of Generic Truncated model

        Parameters
        ----------
        params : array-like
            The parameters of the model.

        Returns
        -------
        loglike : ndarray (nobs,)
            The log likelihood for each observation of the model evaluated
            at `params`. See Notes

        Notes
        -----

        """
        ...

    def score_obs(self, params):
        """
        Generic Truncated model score (gradient) vector of the log-likelihood

        Parameters
        ----------
        params : array-like
            The parameters of the model

        Returns
        -------
        score : ndarray, 1-D
            The score vector of the model, i.e. the first derivative of the
            loglikelihood function, evaluated at `params`
        """
        ...

    def score(self, params):
        """
        Generic Truncated model score (gradient) vector of the log-likelihood

        Parameters
        ----------
        params : array-like
            The parameters of the model

        Returns
        -------
        score : ndarray, 1-D
            The score vector of the model, i.e. the first derivative of the
            loglikelihood function, evaluated at `params`
        """
        ...

    def fit(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., callback=..., cov_type=..., cov_kwds=..., use_t=..., **kwargs):
        ...

    def fit_regularized(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., callback=..., alpha=..., trim_mode=..., auto_trim_tol=..., size_trim_tol=..., qc_tol=..., **kwargs):
        ...

    def hessian(self, params): # -> NDArray[floating[Any]]:
        """
        Generic Truncated model Hessian matrix of the loglikelihood

        Parameters
        ----------
        params : array-like
            The parameters of the model

        Returns
        -------
        hess : ndarray, (k_vars, k_vars)
            The Hessian, second derivative of loglikelihood function,
            evaluated at `params`

        Notes
        -----
        """
        ...

    def predict(self, params, exog=..., exposure=..., offset=..., which=..., y_values=...): # -> Any:
        """
        Predict response variable or other statistic given exogenous variables.

        Parameters
        ----------
        params : array_like
            The parameters of the model.
        exog : ndarray, optional
            Explanatory variables for the main count model.
            If ``exog`` is None, then the data from the model will be used.
        offset : ndarray, optional
            Offset is added to the linear predictor of the mean function with
            coefficient equal to 1.
            Default is zero if exog is not None, and the model offset if exog
            is None.
        exposure : ndarray, optional
            Log(exposure) is added to the linear predictor with coefficient
            equal to 1. If exposure is specified, then it will be logged by
            the method. The user does not need to log it first.
            Default is one if exog is is not None, and it is the model exposure
            if exog is None.
        which : str (optional)
            Statitistic to predict. Default is 'mean'.

            - 'mean' : the conditional expectation of endog E(y | x)
            - 'mean-main' : mean parameter of truncated count model.
              Note, this is not the mean of the truncated distribution.
            - 'linear' : the linear predictor of the truncated count model.
            - 'var' : returns the estimated variance of endog implied by the
              model.
            - 'prob-trunc' : probability of truncation. This is the probability
              of observing a zero count implied
              by the truncation model.
            - 'prob' : probabilities of each count from 0 to max(endog), or
              for y_values if those are provided. This is a multivariate
              return (2-dim when predicting for several observations).
              The probabilities in the truncated region are zero.
            - 'prob-base' : probabilities for untruncated base distribution.
              The probabilities are for each count from 0 to max(endog), or
              for y_values if those are provided. This is a multivariate
              return (2-dim when predicting for several observations).


        y_values : array_like
            Values of the random variable endog at which pmf is evaluated.
            Only used if ``which="prob"``

        Returns
        -------
        predicted values

        Notes
        -----
        If exposure is specified, then it will be logged by the method.
        The user does not need to log it first.
        """
        ...



class TruncatedLFPoisson(TruncatedLFGeneric):
    __doc__ = ...
    def __init__(self, endog, exog, offset=..., exposure=..., truncation=..., missing=..., **kwargs) -> None:
        ...



class TruncatedLFNegativeBinomialP(TruncatedLFGeneric):
    __doc__ = ...
    def __init__(self, endog, exog, offset=..., exposure=..., truncation=..., p=..., missing=..., **kwargs) -> None:
        ...



class TruncatedLFGeneralizedPoisson(TruncatedLFGeneric):
    __doc__ = ...
    def __init__(self, endog, exog, offset=..., exposure=..., truncation=..., p=..., missing=..., **kwargs) -> None:
        ...



class _RCensoredGeneric(CountModel):
    __doc__ = ...
    def __init__(self, endog, exog, offset=..., exposure=..., missing=..., **kwargs) -> None:
        ...

    def loglike(self, params): # -> Any:
        """
        Loglikelihood of Generic Censored model

        Parameters
        ----------
        params : array-like
            The parameters of the model.

        Returns
        -------
        loglike : float
            The log-likelihood function of the model evaluated at `params`.
            See notes.

        Notes
        -----

        """
        ...

    def loglikeobs(self, params): # -> NDArray[Any]:
        """
        Loglikelihood for observations of Generic Censored model

        Parameters
        ----------
        params : array-like
            The parameters of the model.

        Returns
        -------
        loglike : ndarray (nobs,)
            The log likelihood for each observation of the model evaluated
            at `params`. See Notes

        Notes
        -----

        """
        ...

    def score_obs(self, params): # -> NDArray[Any]:
        """
        Generic Censored model score (gradient) vector of the log-likelihood

        Parameters
        ----------
        params : array-like
            The parameters of the model

        Returns
        -------
        score : ndarray, 1-D
            The score vector of the model, i.e. the first derivative of the
            loglikelihood function, evaluated at `params`
        """
        ...

    def score(self, params): # -> Any:
        """
        Generic Censored model score (gradient) vector of the log-likelihood

        Parameters
        ----------
        params : array-like
            The parameters of the model

        Returns
        -------
        score : ndarray, 1-D
            The score vector of the model, i.e. the first derivative of the
            loglikelihood function, evaluated at `params`
        """
        ...

    def fit(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., callback=..., cov_type=..., cov_kwds=..., use_t=..., **kwargs):
        ...

    def fit_regularized(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., callback=..., alpha=..., trim_mode=..., auto_trim_tol=..., size_trim_tol=..., qc_tol=..., **kwargs):
        ...

    def hessian(self, params): # -> NDArray[floating[Any]]:
        """
        Generic Censored model Hessian matrix of the loglikelihood

        Parameters
        ----------
        params : array-like
            The parameters of the model

        Returns
        -------
        hess : ndarray, (k_vars, k_vars)
            The Hessian, second derivative of loglikelihood function,
            evaluated at `params`

        Notes
        -----
        """
        ...



class _RCensoredPoisson(_RCensoredGeneric):
    __doc__ = ...
    def __init__(self, endog, exog, offset=..., exposure=..., missing=..., **kwargs) -> None:
        ...



class _RCensoredGeneralizedPoisson(_RCensoredGeneric):
    __doc__ = ...
    def __init__(self, endog, exog, offset=..., p=..., exposure=..., missing=..., **kwargs) -> None:
        ...



class _RCensoredNegativeBinomialP(_RCensoredGeneric):
    __doc__ = ...
    def __init__(self, endog, exog, offset=..., p=..., exposure=..., missing=..., **kwargs) -> None:
        ...



class _RCensored(_RCensoredGeneric):
    __doc__ = ...
    def __init__(self, endog, exog, model=..., distribution=..., offset=..., exposure=..., missing=..., **kwargs) -> None:
        ...



class HurdleCountModel(CountModel):
    __doc__ = ...
    def __init__(self, endog, exog, offset=..., dist=..., zerodist=..., p=..., pzero=..., exposure=..., missing=..., **kwargs) -> None:
        ...

    def loglike(self, params):
        """
        Loglikelihood of Generic Hurdle model

        Parameters
        ----------
        params : array-like
            The parameters of the model.

        Returns
        -------
        loglike : float
            The log-likelihood function of the model evaluated at `params`.
            See notes.

        Notes
        -----

        """
        ...

    def fit(self, start_params=..., method=..., maxiter=..., full_output=..., disp=..., callback=..., cov_type=..., cov_kwds=..., use_t=..., **kwargs): # -> HurdleCountResultsWrapper:
        ...

    def predict(self, params, exog=..., exposure=..., offset=..., which=..., y_values=...): # -> Any:
        """
        Predict response variable or other statistic given exogenous variables.

        Parameters
        ----------
        params : array_like
            The parameters of the model.
        exog : ndarray, optional
            Explanatory variables for the main count model.
            If ``exog`` is None, then the data from the model will be used.
        exog_infl : ndarray, optional
            Explanatory variables for the zero-inflation model.
            ``exog_infl`` has to be provided if ``exog`` was provided unless
            ``exog_infl`` in the model is only a constant.
        offset : ndarray, optional
            Offset is added to the linear predictor of the mean function with
            coefficient equal to 1.
            Default is zero if exog is not None, and the model offset if exog
            is None.
        exposure : ndarray, optional
            Log(exposure) is added to the linear predictor with coefficient
            equal to 1. If exposure is specified, then it will be logged by
            the method. The user does not need to log it first.
            Default is one if exog is is not None, and it is the model exposure
            if exog is None.
        which : str (optional)
            Statitistic to predict. Default is 'mean'.

            - 'mean' : the conditional expectation of endog E(y | x)
            - 'mean-main' : mean parameter of truncated count model.
              Note, this is not the mean of the truncated distribution.
            - 'linear' : the linear predictor of the truncated count model.
            - 'var' : returns the estimated variance of endog implied by the
              model.
            - 'prob-main' : probability of selecting the main model which is
              the probability of observing a nonzero count P(y > 0 | x).
            - 'prob-zero' : probability of observing a zero count. P(y=0 | x).
              This is equal to is ``1 - prob-main``
            - 'prob-trunc' : probability of truncation of the truncated count
              model. This is the probability of observing a zero count implied
              by the truncation model.
            - 'mean-nonzero' : expected value conditional on having observation
              larger than zero, E(y | X, y>0)
            - 'prob' : probabilities of each count from 0 to max(endog), or
              for y_values if those are provided. This is a multivariate
              return (2-dim when predicting for several observations).

        y_values : array_like
            Values of the random variable endog at which pmf is evaluated.
            Only used if ``which="prob"``

        Returns
        -------
        predicted values

        Notes
        -----
        'prob-zero' / 'prob-trunc' is the ratio of probabilities of observing
        a zero count between hurdle model and the truncated count model.
        If this ratio is larger than one, then the hurdle model has an inflated
        number of zeros compared to the count model. If it is smaller than one,
        then the number of zeros is deflated.
        """
        ...



class TruncatedLFGenericResults(CountResults):
    __doc__ = ...


class TruncatedLFPoissonResults(TruncatedLFGenericResults):
    __doc__ = ...


class TruncatedNegativeBinomialResults(TruncatedLFGenericResults):
    __doc__ = ...


class L1TruncatedLFGenericResults(L1CountResults, TruncatedLFGenericResults):
    ...


class TruncatedLFGenericResultsWrapper(lm.RegressionResultsWrapper):
    ...


class L1TruncatedLFGenericResultsWrapper(lm.RegressionResultsWrapper):
    ...


class HurdleCountResults(CountResults):
    __doc__ = ...
    def __init__(self, model, mlefit, results_zero, results_count, cov_type=..., cov_kwds=..., use_t=...) -> None:
        ...

    @cache_readonly
    def llnull(self):
        ...

    @cache_readonly
    def bse(self): # -> NDArray[Any]:
        ...



class L1HurdleCountResults(L1CountResults, HurdleCountResults):
    ...


class HurdleCountResultsWrapper(lm.RegressionResultsWrapper):
    ...


class L1HurdleCountResultsWrapper(lm.RegressionResultsWrapper):
    ...
