"""
This type stub file was generated by pyright.
"""

from numpy import array, asarray

__all__ = ['mackinnonp', 'mackinnoncrit']
tau_star_nc = ...
tau_min_nc = ...
tau_max_nc = ...
tau_star_c = ...
tau_min_c = ...
tau_max_c = ...
tau_star_ct = ...
tau_min_ct = ...
tau_max_ct = ...
tau_star_ctt = ...
tau_min_ctt = ...
tau_max_ctt = ...
_tau_maxs = ...
_tau_mins = ...
_tau_stars = ...
small_scaling = array([1, 1, 0.01])
tau_nc_smallp = ...
tau_nc_smallp = asarray(tau_nc_smallp) * small_scaling
tau_c_smallp = ...
tau_c_smallp = asarray(tau_c_smallp) * small_scaling
tau_ct_smallp = ...
tau_ct_smallp = asarray(tau_ct_smallp) * small_scaling
tau_ctt_smallp = ...
tau_ctt_smallp = asarray(tau_ctt_smallp) * small_scaling
_tau_smallps = ...
large_scaling = array([1, 0.1, 0.1, 0.01])
tau_nc_largep = ...
tau_nc_largep = asarray(tau_nc_largep) * large_scaling
tau_c_largep = ...
tau_c_largep = asarray(tau_c_largep) * large_scaling
tau_ct_largep = ...
tau_ct_largep = asarray(tau_ct_largep) * large_scaling
tau_ctt_largep = ...
tau_ctt_largep = asarray(tau_ctt_largep) * large_scaling
_tau_largeps = ...
z_star_nc = ...
z_star_c = ...
z_star_ct = ...
z_star_ctt = ...
z_nc_smallp = array([[0.0342, -0.6376, 0, -0.03872], [1.3426, -0.768, 0, -0.04104], [3.8607, -2.4159, 0.51293, -0.09835], [6.1072, -3.725, 0.85887, -0.13102], [7.78, -4.4579, 1.00056, -0.14014], [4.0253, -0.8815, 0, -0.04887]])
z_c_smallp = array([[2.2142, -1.7863, 0.32828, -0.07727], [1.1662, 0.1814, -0.36707, 0], [6.6584, -4.3486, 1.04705, -0.15011], [3.3249, -0.8456, 0, -0.04818], [4.0356, -0.9306, 0, -0.04776], [13.9959, -8.4314, 1.97411, -0.22234]])
z_ct_smallp = array([[4.6476, -2.8932, 0.5832, -0.0999], [7.2453, -4.7021, 1.127, -0.15665], [3.4893, -0.8914, 0, -0.04755], [1.6604, 1.0375, -0.53377, 0], [2.006, 1.1197, -0.55315, 0], [11.1626, -5.6858, 1.21479, -0.15428]])
z_ctt_smallp = array([[3.6739, -1.1549, 0, -0.03947], [3.9783, -1.0619, 0, -0.04394], [2.0062, 0.8907, -0.51708, 0], [4.9218, -1.0663, 0, -0.04691], [5.1433, -0.9877, 0, -0.04993], [23.6812, -14.6485, 3.42909, -0.33794]])
z_large_scaling = array([1, 0.1, 0.01, 0.001, 0.00001])
z_nc_largep = array([[0.4927, 6.906, 13.2331, 12.099, 0], [1.5167, 4.6859, 4.2401, 2.7939, 7.9601], [2.2347, 3.9465, 2.2406, 0.8746, 1.4239], [2.8239, 3.6265, 1.6738, 0.5408, 0.7449], [3.3174, 3.3492, 1.2792, 0.3416, 0.3894], [3.729, 3.0611, 0.9579, 0.2087, 0.1943]])
z_c_largep = array([[1.717, 5.5243, 4.3463, 1.6671, 0], [2.2394, 4.2377, 2.432, 0.9241, 0.4364], [2.743, 3.626, 1.5703, 0.4612, 0.567], [3.228, 3.3399, 1.2319, 0.3162, 0.3482], [3.6583, 3.0934, 0.9681, 0.2111, 0.1979], [4.0379, 2.8735, 0.7694, 0.1433, 0.1146]])
z_ct_largep = array([[2.7117, 4.5731, 2.2868, 0.6362, 0.5], [3.0972, 4.0873, 1.8982, 0.5796, 0.7384], [3.4594, 3.6326, 1.4284, 0.3813, 0.4325], [3.806, 3.2634, 1.0689, 0.2402, 0.2304], [4.1402, 2.9867, 0.8323, 0.16, 0.1315], [4.4497, 2.7534, 0.6582, 0.1089, 0.0773]])
z_ctt_largep = array([[3.4671, 4.3476, 1.9231, 0.5381, 0.6216], [3.7827, 3.9421, 1.5699, 0.4093, 0.4485], [4.052, 3.4947, 1.1772, 0.2642, 0.2502], [4.3311, 3.1625, 0.9126, 0.1775, 0.1462], [4.594, 2.8739, 0.707, 0.1181, 0.0838], [4.8479, 2.6447, 0.5647, 0.0827, 0.0518]])
def mackinnonp(teststat, regression=..., N=..., lags=...): # -> float | ndarray[_AnyShape, dtype[Any]] | ndarray[tuple[()], dtype[Any]]:
    """
    Returns MacKinnon's approximate p-value for teststat.

    Parameters
    ----------
    teststat : float
        "T-value" from an Augmented Dickey-Fuller regression.
    regression : str {"c", "n", "ct", "ctt"}
        This is the method of regression that was used.  Following MacKinnon's
        notation, this can be "c" for constant, "n" for no constant, "ct" for
        constant and trend, and "ctt" for constant, trend, and trend-squared.
    N : int
        The number of series believed to be I(1).  For (Augmented) Dickey-
        Fuller N = 1.

    Returns
    -------
    p-value : float
        The p-value for the ADF statistic estimated using MacKinnon 1994.

    References
    ----------
    .. [*] MacKinnon, J.G. 1994  "Approximate Asymptotic Distribution Functions
        for Unit-Root and Cointegration Tests." Journal of Business & Economics
        Statistics, 12.2, 167-76.

    Notes
    -----
    For (A)DF
    H_0: AR coefficient = 1
    H_a: AR coefficient < 1
    """
    ...

tau_nc_2010 = ...
tau_nc_2010 = asarray(tau_nc_2010)
tau_c_2010 = ...
tau_c_2010 = asarray(tau_c_2010)
tau_ct_2010 = ...
tau_ct_2010 = asarray(tau_ct_2010)
tau_ctt_2010 = ...
tau_ctt_2010 = asarray(tau_ctt_2010)
tau_2010s = ...
def mackinnoncrit(N=..., regression=..., nobs=...): # -> ndarray[_AnyShape, dtype[Any]] | NDArray[floating[Any]]:
    """
    Returns the critical values for cointegrating and the ADF test.

    In 2010 MacKinnon updated the values of his 1994 paper with critical values
    for the augmented Dickey-Fuller tests.  These new values are to be
    preferred and are used here.

    Parameters
    ----------
    N : int
        The number of series of I(1) series for which the null of
        non-cointegration is being tested.  For N > 12, the critical values
        are linearly interpolated (not yet implemented).  For the ADF test,
        N = 1.
    reg : str {'c', 'tc', 'ctt', 'n'}
        Following MacKinnon (1996), these stand for the type of regression run.
        'c' for constant and no trend, 'tc' for constant with a linear trend,
        'ctt' for constant with a linear and quadratic trend, and 'n' for
        no constant.  The values for the no constant case are taken from the
        1996 paper, as they were not updated for 2010 due to the unrealistic
        assumptions that would underlie such a case.
    nobs : int or np.inf
        This is the sample size.  If the sample size is numpy.inf, then the
        asymptotic critical values are returned.

    References
    ----------
    .. [*] MacKinnon, J.G. 1994  "Approximate Asymptotic Distribution Functions
        for Unit-Root and Cointegration Tests." Journal of Business & Economics
        Statistics, 12.2, 167-76.
    .. [*] MacKinnon, J.G. 2010.  "Critical Values for Cointegration Tests."
        Queen's University, Dept of Economics Working Papers 1227.
        http://ideas.repec.org/p/qed/wpaper/1227.html
    """
    ...
