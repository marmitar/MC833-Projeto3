"""
This type stub file was generated by pyright.
"""

LOWER_BOUND = ...
class HoltWintersArgs:
    def __init__(self, xi, p, bounds, y, m, n, transform=...) -> None:
        ...

    @property
    def xi(self): # -> Any:
        ...

    @xi.setter
    def xi(self, value): # -> None:
        ...

    @property
    def p(self): # -> Any:
        ...

    @property
    def bounds(self): # -> Any:
        ...

    @property
    def y(self): # -> Any:
        ...

    @property
    def lvl(self): # -> _Array1D[float64]:
        ...

    @property
    def b(self): # -> _Array1D[float64]:
        ...

    @property
    def s(self): # -> _Array1D[float64]:
        ...

    @property
    def m(self): # -> Any:
        ...

    @property
    def n(self): # -> Any:
        ...

    @property
    def transform(self): # -> bool:
        ...

    @transform.setter
    def transform(self, value): # -> None:
        ...



def to_restricted(p, sel, bounds): # -> tuple[Any, Any, Any]:
    """
    Transform parameters from the unrestricted [0,1] space
    to satisfy both the bounds and the 2 constraints
    beta <= alpha and gamma <= (1-alpha)

    Parameters
    ----------
    p : ndarray
        The parameters to transform
    sel : ndarray
        Array indicating whether a parameter is being estimated. If not
        estimated, not transformed.
    bounds : ndarray
        2-d array of bounds where bound for element i is in row i
        and stored as [lb, ub]

    Returns
    -------

    """
    ...

def to_unrestricted(p, sel, bounds): # -> tuple[Any, Any, Any]:
    """
    Transform parameters to the unrestricted [0,1] space

    Parameters
    ----------
    p : ndarray
        Parameters that strictly satisfy the constraints

    Returns
    -------
    ndarray
        Parameters all in (0,1)
    """
    ...

def holt_init(x, hw_args: HoltWintersArgs): # -> tuple[Any, Any, Any, Any, Any, Any]:
    """
    Initialization for the Holt Models
    """
    ...

def holt__(x, hw_args: HoltWintersArgs):
    """
    Simple Exponential Smoothing
    Minimization Function
    (,)
    """
    ...

def holt_mul_dam(x, hw_args: HoltWintersArgs):
    """
    Multiplicative and Multiplicative Damped
    Minimization Function
    (M,) & (Md,)
    """
    ...

def holt_add_dam(x, hw_args: HoltWintersArgs):
    """
    Additive and Additive Damped
    Minimization Function
    (A,) & (Ad,)
    """
    ...

def holt_win_init(x, hw_args: HoltWintersArgs): # -> tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any]:
    """Initialization for the Holt Winters Seasonal Models"""
    ...

def holt_win__mul(x, hw_args: HoltWintersArgs):
    """
    Multiplicative Seasonal
    Minimization Function
    (,M)
    """
    ...

def holt_win__add(x, hw_args: HoltWintersArgs):
    """
    Additive Seasonal
    Minimization Function
    (,A)
    """
    ...

def holt_win_add_mul_dam(x, hw_args: HoltWintersArgs):
    """
    Additive and Additive Damped with Multiplicative Seasonal
    Minimization Function
    (A,M) & (Ad,M)
    """
    ...

def holt_win_mul_mul_dam(x, hw_args: HoltWintersArgs):
    """
    Multiplicative and Multiplicative Damped with Multiplicative Seasonal
    Minimization Function
    (M,M) & (Md,M)
    """
    ...

def holt_win_add_add_dam(x, hw_args: HoltWintersArgs):
    """
    Additive and Additive Damped with Additive Seasonal
    Minimization Function
    (A,A) & (Ad,A)
    """
    ...

def holt_win_mul_add_dam(x, hw_args: HoltWintersArgs):
    """
    Multiplicative and Multiplicative Damped with Additive Seasonal
    Minimization Function
    (M,A) & (M,Ad)
    """
    ...
